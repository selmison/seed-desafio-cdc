// Code generated by goa v3.2.4, DO NOT EDIT.
//
// catalog HTTP server types
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package server

import (
	"unicode/utf8"

	catalog "github.com/selmison/seed-desafio-cdc/gen/catalog"
	goa "goa.design/goa/v3/pkg"
)

// CreateActorRequestBody is the type of the "catalog" service "create_actor"
// endpoint HTTP request body.
type CreateActorRequestBody struct {
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Email       *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// CreateBookRequestBody is the type of the "catalog" service "create_book"
// endpoint HTTP request body.
type CreateBookRequestBody struct {
	Title       *string  `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Synopsis    *string  `form:"synopsis,omitempty" json:"synopsis,omitempty" xml:"synopsis,omitempty"`
	Summary     *string  `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	Price       *float32 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	Pages       *int     `form:"pages,omitempty" json:"pages,omitempty" xml:"pages,omitempty"`
	Isbn        *string  `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
	Issue       *string  `form:"issue,omitempty" json:"issue,omitempty" xml:"issue,omitempty"`
	CategoryIds []string `form:"category_ids,omitempty" json:"category_ids,omitempty" xml:"category_ids,omitempty"`
	ActorIds    []string `form:"actor_ids,omitempty" json:"actor_ids,omitempty" xml:"actor_ids,omitempty"`
}

// CreateCartRequestBody is the type of the "catalog" service "create_cart"
// endpoint HTTP request body.
type CreateCartRequestBody struct {
	Total      *float32              `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	Items      []*ItemDTORequestBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	CustomerID *string               `form:"customer_id,omitempty" json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	CouponID   *string               `form:"coupon_id,omitempty" json:"coupon_id,omitempty" xml:"coupon_id,omitempty"`
}

// CreateCategoryRequestBody is the type of the "catalog" service
// "create_category" endpoint HTTP request body.
type CreateCategoryRequestBody struct {
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// CreateCountryRequestBody is the type of the "catalog" service
// "create_country" endpoint HTTP request body.
type CreateCountryRequestBody struct {
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// ApplyCouponRequestBody is the type of the "catalog" service "apply_coupon"
// endpoint HTTP request body.
type ApplyCouponRequestBody struct {
	Code       *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	PurchaseID *string `form:"purchase_id,omitempty" json:"purchase_id,omitempty" xml:"purchase_id,omitempty"`
}

// CreateCouponRequestBody is the type of the "catalog" service "create_coupon"
// endpoint HTTP request body.
type CreateCouponRequestBody struct {
	Code     *string  `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Discount *float32 `form:"discount,omitempty" json:"discount,omitempty" xml:"discount,omitempty"`
	Validity *string  `form:"validity,omitempty" json:"validity,omitempty" xml:"validity,omitempty"`
}

// CreateCustomerRequestBody is the type of the "catalog" service
// "create_customer" endpoint HTTP request body.
type CreateCustomerRequestBody struct {
	FirstName *string                `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	LastName  *string                `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	Email     *string                `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Document  *string                `form:"document,omitempty" json:"document,omitempty" xml:"document,omitempty"`
	Address   *AddressDTORequestBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	Phone     *string                `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	CartIds   []string               `form:"cart_ids,omitempty" json:"cart_ids,omitempty" xml:"cart_ids,omitempty"`
}

// CreatePurchaseRequestBody is the type of the "catalog" service
// "create_purchase" endpoint HTTP request body.
type CreatePurchaseRequestBody struct {
	Customer *CreateCustomerDTORequestBody `form:"customer,omitempty" json:"customer,omitempty" xml:"customer,omitempty"`
	Cart     *CreateCartDTORequestBody     `form:"cart,omitempty" json:"cart,omitempty" xml:"cart,omitempty"`
}

// CreateStateRequestBody is the type of the "catalog" service "create_state"
// endpoint HTTP request body.
type CreateStateRequestBody struct {
	Name      *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	CountryID *string `form:"country_id,omitempty" json:"country_id,omitempty" xml:"country_id,omitempty"`
}

// CreateActorResponseBody is the type of the "catalog" service "create_actor"
// endpoint HTTP response body.
type CreateActorResponseBody struct {
	ID          string `form:"id" json:"id" xml:"id"`
	Name        string `form:"name" json:"name" xml:"name"`
	Email       string `form:"email" json:"email" xml:"email"`
	Description string `form:"description" json:"description" xml:"description"`
	CreatedAt   string `form:"created_at" json:"created_at" xml:"created_at"`
}

// ListActorsResponseBody is the type of the "catalog" service "list_actors"
// endpoint HTTP response body.
type ListActorsResponseBody []*ActorDTOResponse

// ShowActorResponseBody is the type of the "catalog" service "show_actor"
// endpoint HTTP response body.
type ShowActorResponseBody struct {
	ID          string `form:"id" json:"id" xml:"id"`
	Name        string `form:"name" json:"name" xml:"name"`
	Email       string `form:"email" json:"email" xml:"email"`
	Description string `form:"description" json:"description" xml:"description"`
	CreatedAt   string `form:"created_at" json:"created_at" xml:"created_at"`
}

// CreateBookResponseBody is the type of the "catalog" service "create_book"
// endpoint HTTP response body.
type CreateBookResponseBody struct {
	ID          string   `form:"id" json:"id" xml:"id"`
	Title       string   `form:"title" json:"title" xml:"title"`
	Synopsis    string   `form:"synopsis" json:"synopsis" xml:"synopsis"`
	Summary     *string  `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	Price       float32  `form:"price" json:"price" xml:"price"`
	Pages       int      `form:"pages" json:"pages" xml:"pages"`
	Isbn        string   `form:"isbn" json:"isbn" xml:"isbn"`
	Issue       string   `form:"issue" json:"issue" xml:"issue"`
	CategoryIds []string `form:"category_ids" json:"category_ids" xml:"category_ids"`
	ActorIds    []string `form:"actor_ids" json:"actor_ids" xml:"actor_ids"`
}

// ListBooksResponseBody is the type of the "catalog" service "list_books"
// endpoint HTTP response body.
type ListBooksResponseBody []*BookDTOResponse

// ShowBookResponseBody is the type of the "catalog" service "show_book"
// endpoint HTTP response body.
type ShowBookResponseBody struct {
	ID          string   `form:"id" json:"id" xml:"id"`
	Title       string   `form:"title" json:"title" xml:"title"`
	Synopsis    string   `form:"synopsis" json:"synopsis" xml:"synopsis"`
	Summary     *string  `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	Price       float32  `form:"price" json:"price" xml:"price"`
	Pages       int      `form:"pages" json:"pages" xml:"pages"`
	Isbn        string   `form:"isbn" json:"isbn" xml:"isbn"`
	Issue       string   `form:"issue" json:"issue" xml:"issue"`
	CategoryIds []string `form:"category_ids" json:"category_ids" xml:"category_ids"`
	ActorIds    []string `form:"actor_ids" json:"actor_ids" xml:"actor_ids"`
}

// CreateCartResponseBody is the type of the "catalog" service "create_cart"
// endpoint HTTP response body.
type CreateCartResponseBody struct {
	ID              string                 `form:"id" json:"id" xml:"id"`
	Total           float32                `form:"total" json:"total" xml:"total"`
	TotalWithCoupon *float32               `form:"total_with_coupon,omitempty" json:"total_with_coupon,omitempty" xml:"total_with_coupon,omitempty"`
	Items           []*ItemDTOResponseBody `form:"items" json:"items" xml:"items"`
	CustomerID      string                 `form:"customer_id" json:"customer_id" xml:"customer_id"`
	CouponID        *string                `form:"coupon_id,omitempty" json:"coupon_id,omitempty" xml:"coupon_id,omitempty"`
}

// CreateCategoryResponseBody is the type of the "catalog" service
// "create_category" endpoint HTTP response body.
type CreateCategoryResponseBody struct {
	ID   string `form:"id" json:"id" xml:"id"`
	Name string `form:"name" json:"name" xml:"name"`
}

// ListCategoriesResponseBody is the type of the "catalog" service
// "list_categories" endpoint HTTP response body.
type ListCategoriesResponseBody []*CategoryDTOResponse

// ShowCategoryResponseBody is the type of the "catalog" service
// "show_category" endpoint HTTP response body.
type ShowCategoryResponseBody struct {
	ID   string `form:"id" json:"id" xml:"id"`
	Name string `form:"name" json:"name" xml:"name"`
}

// CreateCountryResponseBody is the type of the "catalog" service
// "create_country" endpoint HTTP response body.
type CreateCountryResponseBody struct {
	ID       string  `form:"id" json:"id" xml:"id"`
	Name     string  `form:"name" json:"name" xml:"name"`
	StateIds *string `form:"state_ids,omitempty" json:"state_ids,omitempty" xml:"state_ids,omitempty"`
}

// ListCountriesResponseBody is the type of the "catalog" service
// "list_countries" endpoint HTTP response body.
type ListCountriesResponseBody []*CountryDTOResponse

// ShowCountryResponseBody is the type of the "catalog" service "show_country"
// endpoint HTTP response body.
type ShowCountryResponseBody struct {
	ID       string  `form:"id" json:"id" xml:"id"`
	Name     string  `form:"name" json:"name" xml:"name"`
	StateIds *string `form:"state_ids,omitempty" json:"state_ids,omitempty" xml:"state_ids,omitempty"`
}

// CreateCouponResponseBody is the type of the "catalog" service
// "create_coupon" endpoint HTTP response body.
type CreateCouponResponseBody struct {
	ID       string  `form:"id" json:"id" xml:"id"`
	Code     string  `form:"code" json:"code" xml:"code"`
	Discount float32 `form:"discount" json:"discount" xml:"discount"`
	Validity string  `form:"validity" json:"validity" xml:"validity"`
}

// CreateCustomerResponseBody is the type of the "catalog" service
// "create_customer" endpoint HTTP response body.
type CreateCustomerResponseBody struct {
	ID        string                  `form:"id" json:"id" xml:"id"`
	FirstName string                  `form:"first_name" json:"first_name" xml:"first_name"`
	LastName  string                  `form:"last_name" json:"last_name" xml:"last_name"`
	Email     string                  `form:"email" json:"email" xml:"email"`
	Document  string                  `form:"document" json:"document" xml:"document"`
	Address   *AddressDTOResponseBody `form:"address" json:"address" xml:"address"`
	Phone     string                  `form:"phone" json:"phone" xml:"phone"`
	CartIds   []string                `form:"cart_ids,omitempty" json:"cart_ids,omitempty" xml:"cart_ids,omitempty"`
}

// CreatePurchaseResponseBody is the type of the "catalog" service
// "create_purchase" endpoint HTTP response body.
type CreatePurchaseResponseBody struct {
	ID       string                   `form:"id" json:"id" xml:"id"`
	Customer *CustomerDTOResponseBody `form:"customer" json:"customer" xml:"customer"`
	Cart     *CartDTOResponseBody     `form:"cart" json:"cart" xml:"cart"`
}

// ShowPurchaseResponseBody is the type of the "catalog" service
// "show_purchase" endpoint HTTP response body.
type ShowPurchaseResponseBody struct {
	ID       string                   `form:"id" json:"id" xml:"id"`
	Customer *CustomerDTOResponseBody `form:"customer" json:"customer" xml:"customer"`
	Cart     *CartDTOResponseBody     `form:"cart" json:"cart" xml:"cart"`
}

// CreateStateResponseBody is the type of the "catalog" service "create_state"
// endpoint HTTP response body.
type CreateStateResponseBody struct {
	ID        string `form:"id" json:"id" xml:"id"`
	Name      string `form:"name" json:"name" xml:"name"`
	CountryID string `form:"country_id" json:"country_id" xml:"country_id"`
}

// ListStatesResponseBody is the type of the "catalog" service "list_states"
// endpoint HTTP response body.
type ListStatesResponseBody []*StateDTOResponse

// ShowStateResponseBody is the type of the "catalog" service "show_state"
// endpoint HTTP response body.
type ShowStateResponseBody struct {
	ID        string `form:"id" json:"id" xml:"id"`
	Name      string `form:"name" json:"name" xml:"name"`
	CountryID string `form:"country_id" json:"country_id" xml:"country_id"`
}

// CreateActorInvalidFieldsResponseBody is the type of the "catalog" service
// "create_actor" endpoint HTTP response body for the "invalid_fields" error.
type CreateActorInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowActorNotFoundResponseBody is the type of the "catalog" service
// "show_actor" endpoint HTTP response body for the "not_found" error.
type ShowActorNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBookInvalidFieldsResponseBody is the type of the "catalog" service
// "create_book" endpoint HTTP response body for the "invalid_fields" error.
type CreateBookInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBookNotFoundResponseBody is the type of the "catalog" service
// "show_book" endpoint HTTP response body for the "not_found" error.
type ShowBookNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCartInvalidFieldsResponseBody is the type of the "catalog" service
// "create_cart" endpoint HTTP response body for the "invalid_fields" error.
type CreateCartInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCategoryInvalidFieldsResponseBody is the type of the "catalog" service
// "create_category" endpoint HTTP response body for the "invalid_fields" error.
type CreateCategoryInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowCategoryNotFoundResponseBody is the type of the "catalog" service
// "show_category" endpoint HTTP response body for the "not_found" error.
type ShowCategoryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCountryInvalidFieldsResponseBody is the type of the "catalog" service
// "create_country" endpoint HTTP response body for the "invalid_fields" error.
type CreateCountryInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowCountryNotFoundResponseBody is the type of the "catalog" service
// "show_country" endpoint HTTP response body for the "not_found" error.
type ShowCountryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ApplyCouponInvalidFieldsResponseBody is the type of the "catalog" service
// "apply_coupon" endpoint HTTP response body for the "invalid_fields" error.
type ApplyCouponInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCouponInvalidFieldsResponseBody is the type of the "catalog" service
// "create_coupon" endpoint HTTP response body for the "invalid_fields" error.
type CreateCouponInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCustomerInvalidFieldsResponseBody is the type of the "catalog" service
// "create_customer" endpoint HTTP response body for the "invalid_fields" error.
type CreateCustomerInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatePurchaseInvalidFieldsResponseBody is the type of the "catalog" service
// "create_purchase" endpoint HTTP response body for the "invalid_fields" error.
type CreatePurchaseInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowPurchaseNotFoundResponseBody is the type of the "catalog" service
// "show_purchase" endpoint HTTP response body for the "not_found" error.
type ShowPurchaseNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateStateInvalidFieldsResponseBody is the type of the "catalog" service
// "create_state" endpoint HTTP response body for the "invalid_fields" error.
type CreateStateInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowStateNotFoundResponseBody is the type of the "catalog" service
// "show_state" endpoint HTTP response body for the "not_found" error.
type ShowStateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ActorDTOResponse is used to define fields on response body types.
type ActorDTOResponse struct {
	ID          string `form:"id" json:"id" xml:"id"`
	Name        string `form:"name" json:"name" xml:"name"`
	Email       string `form:"email" json:"email" xml:"email"`
	Description string `form:"description" json:"description" xml:"description"`
	CreatedAt   string `form:"created_at" json:"created_at" xml:"created_at"`
}

// BookDTOResponse is used to define fields on response body types.
type BookDTOResponse struct {
	ID          string   `form:"id" json:"id" xml:"id"`
	Title       string   `form:"title" json:"title" xml:"title"`
	Synopsis    string   `form:"synopsis" json:"synopsis" xml:"synopsis"`
	Summary     *string  `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	Price       float32  `form:"price" json:"price" xml:"price"`
	Pages       int      `form:"pages" json:"pages" xml:"pages"`
	Isbn        string   `form:"isbn" json:"isbn" xml:"isbn"`
	Issue       string   `form:"issue" json:"issue" xml:"issue"`
	CategoryIds []string `form:"category_ids" json:"category_ids" xml:"category_ids"`
	ActorIds    []string `form:"actor_ids" json:"actor_ids" xml:"actor_ids"`
}

// ItemDTOResponseBody is used to define fields on response body types.
type ItemDTOResponseBody struct {
	BookID string `form:"book_id" json:"book_id" xml:"book_id"`
	Amount int32  `form:"amount" json:"amount" xml:"amount"`
}

// CategoryDTOResponse is used to define fields on response body types.
type CategoryDTOResponse struct {
	ID   string `form:"id" json:"id" xml:"id"`
	Name string `form:"name" json:"name" xml:"name"`
}

// CountryDTOResponse is used to define fields on response body types.
type CountryDTOResponse struct {
	ID       string  `form:"id" json:"id" xml:"id"`
	Name     string  `form:"name" json:"name" xml:"name"`
	StateIds *string `form:"state_ids,omitempty" json:"state_ids,omitempty" xml:"state_ids,omitempty"`
}

// AddressDTOResponseBody is used to define fields on response body types.
type AddressDTOResponseBody struct {
	Address    string `form:"address" json:"address" xml:"address"`
	Complement string `form:"complement" json:"complement" xml:"complement"`
	City       string `form:"city" json:"city" xml:"city"`
	StateID    string `form:"state_id" json:"state_id" xml:"state_id"`
	Cep        string `form:"cep" json:"cep" xml:"cep"`
}

// CustomerDTOResponseBody is used to define fields on response body types.
type CustomerDTOResponseBody struct {
	ID        string                  `form:"id" json:"id" xml:"id"`
	FirstName string                  `form:"first_name" json:"first_name" xml:"first_name"`
	LastName  string                  `form:"last_name" json:"last_name" xml:"last_name"`
	Email     string                  `form:"email" json:"email" xml:"email"`
	Document  string                  `form:"document" json:"document" xml:"document"`
	Address   *AddressDTOResponseBody `form:"address" json:"address" xml:"address"`
	Phone     string                  `form:"phone" json:"phone" xml:"phone"`
	CartIds   []string                `form:"cart_ids,omitempty" json:"cart_ids,omitempty" xml:"cart_ids,omitempty"`
}

// CartDTOResponseBody is used to define fields on response body types.
type CartDTOResponseBody struct {
	ID              string                 `form:"id" json:"id" xml:"id"`
	Total           float32                `form:"total" json:"total" xml:"total"`
	TotalWithCoupon *float32               `form:"total_with_coupon,omitempty" json:"total_with_coupon,omitempty" xml:"total_with_coupon,omitempty"`
	Items           []*ItemDTOResponseBody `form:"items" json:"items" xml:"items"`
	CustomerID      string                 `form:"customer_id" json:"customer_id" xml:"customer_id"`
	CouponID        *string                `form:"coupon_id,omitempty" json:"coupon_id,omitempty" xml:"coupon_id,omitempty"`
}

// StateDTOResponse is used to define fields on response body types.
type StateDTOResponse struct {
	ID        string `form:"id" json:"id" xml:"id"`
	Name      string `form:"name" json:"name" xml:"name"`
	CountryID string `form:"country_id" json:"country_id" xml:"country_id"`
}

// ItemDTORequestBody is used to define fields on request body types.
type ItemDTORequestBody struct {
	BookID *string `form:"book_id,omitempty" json:"book_id,omitempty" xml:"book_id,omitempty"`
	Amount *int32  `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
}

// AddressDTORequestBody is used to define fields on request body types.
type AddressDTORequestBody struct {
	Address    *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	Complement *string `form:"complement,omitempty" json:"complement,omitempty" xml:"complement,omitempty"`
	City       *string `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
	StateID    *string `form:"state_id,omitempty" json:"state_id,omitempty" xml:"state_id,omitempty"`
	Cep        *string `form:"cep,omitempty" json:"cep,omitempty" xml:"cep,omitempty"`
}

// CreateCustomerDTORequestBody is used to define fields on request body types.
type CreateCustomerDTORequestBody struct {
	FirstName *string                `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	LastName  *string                `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	Email     *string                `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Document  *string                `form:"document,omitempty" json:"document,omitempty" xml:"document,omitempty"`
	Address   *AddressDTORequestBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	Phone     *string                `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	CartIds   []string               `form:"cart_ids,omitempty" json:"cart_ids,omitempty" xml:"cart_ids,omitempty"`
}

// CreateCartDTORequestBody is used to define fields on request body types.
type CreateCartDTORequestBody struct {
	Total      *float32              `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	Items      []*ItemDTORequestBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	CustomerID *string               `form:"customer_id,omitempty" json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	CouponID   *string               `form:"coupon_id,omitempty" json:"coupon_id,omitempty" xml:"coupon_id,omitempty"`
}

// NewCreateActorResponseBody builds the HTTP response body from the result of
// the "create_actor" endpoint of the "catalog" service.
func NewCreateActorResponseBody(res *catalog.ActorDTO) *CreateActorResponseBody {
	body := &CreateActorResponseBody{
		ID:          res.ID,
		Name:        res.Name,
		Email:       res.Email,
		Description: res.Description,
		CreatedAt:   res.CreatedAt,
	}
	return body
}

// NewListActorsResponseBody builds the HTTP response body from the result of
// the "list_actors" endpoint of the "catalog" service.
func NewListActorsResponseBody(res []*catalog.ActorDTO) ListActorsResponseBody {
	body := make([]*ActorDTOResponse, len(res))
	for i, val := range res {
		body[i] = marshalCatalogActorDTOToActorDTOResponse(val)
	}
	return body
}

// NewShowActorResponseBody builds the HTTP response body from the result of
// the "show_actor" endpoint of the "catalog" service.
func NewShowActorResponseBody(res *catalog.ActorDTO) *ShowActorResponseBody {
	body := &ShowActorResponseBody{
		ID:          res.ID,
		Name:        res.Name,
		Email:       res.Email,
		Description: res.Description,
		CreatedAt:   res.CreatedAt,
	}
	return body
}

// NewCreateBookResponseBody builds the HTTP response body from the result of
// the "create_book" endpoint of the "catalog" service.
func NewCreateBookResponseBody(res *catalog.BookDTO) *CreateBookResponseBody {
	body := &CreateBookResponseBody{
		ID:       res.ID,
		Title:    res.Title,
		Synopsis: res.Synopsis,
		Summary:  res.Summary,
		Price:    res.Price,
		Pages:    res.Pages,
		Isbn:     res.Isbn,
		Issue:    res.Issue,
	}
	if res.CategoryIds != nil {
		body.CategoryIds = make([]string, len(res.CategoryIds))
		for i, val := range res.CategoryIds {
			body.CategoryIds[i] = val
		}
	}
	if res.ActorIds != nil {
		body.ActorIds = make([]string, len(res.ActorIds))
		for i, val := range res.ActorIds {
			body.ActorIds[i] = val
		}
	}
	return body
}

// NewListBooksResponseBody builds the HTTP response body from the result of
// the "list_books" endpoint of the "catalog" service.
func NewListBooksResponseBody(res []*catalog.BookDTO) ListBooksResponseBody {
	body := make([]*BookDTOResponse, len(res))
	for i, val := range res {
		body[i] = marshalCatalogBookDTOToBookDTOResponse(val)
	}
	return body
}

// NewShowBookResponseBody builds the HTTP response body from the result of the
// "show_book" endpoint of the "catalog" service.
func NewShowBookResponseBody(res *catalog.BookDTO) *ShowBookResponseBody {
	body := &ShowBookResponseBody{
		ID:       res.ID,
		Title:    res.Title,
		Synopsis: res.Synopsis,
		Summary:  res.Summary,
		Price:    res.Price,
		Pages:    res.Pages,
		Isbn:     res.Isbn,
		Issue:    res.Issue,
	}
	if res.CategoryIds != nil {
		body.CategoryIds = make([]string, len(res.CategoryIds))
		for i, val := range res.CategoryIds {
			body.CategoryIds[i] = val
		}
	}
	if res.ActorIds != nil {
		body.ActorIds = make([]string, len(res.ActorIds))
		for i, val := range res.ActorIds {
			body.ActorIds[i] = val
		}
	}
	return body
}

// NewCreateCartResponseBody builds the HTTP response body from the result of
// the "create_cart" endpoint of the "catalog" service.
func NewCreateCartResponseBody(res *catalog.CartDTO) *CreateCartResponseBody {
	body := &CreateCartResponseBody{
		ID:              res.ID,
		Total:           res.Total,
		TotalWithCoupon: res.TotalWithCoupon,
		CustomerID:      res.CustomerID,
		CouponID:        res.CouponID,
	}
	if res.Items != nil {
		body.Items = make([]*ItemDTOResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalCatalogItemDTOToItemDTOResponseBody(val)
		}
	}
	return body
}

// NewCreateCategoryResponseBody builds the HTTP response body from the result
// of the "create_category" endpoint of the "catalog" service.
func NewCreateCategoryResponseBody(res *catalog.CategoryDTO) *CreateCategoryResponseBody {
	body := &CreateCategoryResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	return body
}

// NewListCategoriesResponseBody builds the HTTP response body from the result
// of the "list_categories" endpoint of the "catalog" service.
func NewListCategoriesResponseBody(res []*catalog.CategoryDTO) ListCategoriesResponseBody {
	body := make([]*CategoryDTOResponse, len(res))
	for i, val := range res {
		body[i] = marshalCatalogCategoryDTOToCategoryDTOResponse(val)
	}
	return body
}

// NewShowCategoryResponseBody builds the HTTP response body from the result of
// the "show_category" endpoint of the "catalog" service.
func NewShowCategoryResponseBody(res *catalog.CategoryDTO) *ShowCategoryResponseBody {
	body := &ShowCategoryResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	return body
}

// NewCreateCountryResponseBody builds the HTTP response body from the result
// of the "create_country" endpoint of the "catalog" service.
func NewCreateCountryResponseBody(res *catalog.CountryDTO) *CreateCountryResponseBody {
	body := &CreateCountryResponseBody{
		ID:       res.ID,
		Name:     res.Name,
		StateIds: res.StateIds,
	}
	return body
}

// NewListCountriesResponseBody builds the HTTP response body from the result
// of the "list_countries" endpoint of the "catalog" service.
func NewListCountriesResponseBody(res []*catalog.CountryDTO) ListCountriesResponseBody {
	body := make([]*CountryDTOResponse, len(res))
	for i, val := range res {
		body[i] = marshalCatalogCountryDTOToCountryDTOResponse(val)
	}
	return body
}

// NewShowCountryResponseBody builds the HTTP response body from the result of
// the "show_country" endpoint of the "catalog" service.
func NewShowCountryResponseBody(res *catalog.CountryDTO) *ShowCountryResponseBody {
	body := &ShowCountryResponseBody{
		ID:       res.ID,
		Name:     res.Name,
		StateIds: res.StateIds,
	}
	return body
}

// NewCreateCouponResponseBody builds the HTTP response body from the result of
// the "create_coupon" endpoint of the "catalog" service.
func NewCreateCouponResponseBody(res *catalog.CouponDTO) *CreateCouponResponseBody {
	body := &CreateCouponResponseBody{
		ID:       res.ID,
		Code:     res.Code,
		Discount: res.Discount,
		Validity: res.Validity,
	}
	return body
}

// NewCreateCustomerResponseBody builds the HTTP response body from the result
// of the "create_customer" endpoint of the "catalog" service.
func NewCreateCustomerResponseBody(res *catalog.CustomerDTO) *CreateCustomerResponseBody {
	body := &CreateCustomerResponseBody{
		ID:        res.ID,
		FirstName: res.FirstName,
		LastName:  res.LastName,
		Email:     res.Email,
		Document:  res.Document,
		Phone:     res.Phone,
	}
	if res.Address != nil {
		body.Address = marshalCatalogAddressDTOToAddressDTOResponseBody(res.Address)
	}
	if res.CartIds != nil {
		body.CartIds = make([]string, len(res.CartIds))
		for i, val := range res.CartIds {
			body.CartIds[i] = val
		}
	}
	return body
}

// NewCreatePurchaseResponseBody builds the HTTP response body from the result
// of the "create_purchase" endpoint of the "catalog" service.
func NewCreatePurchaseResponseBody(res *catalog.PurchaseDTO) *CreatePurchaseResponseBody {
	body := &CreatePurchaseResponseBody{
		ID: res.ID,
	}
	if res.Customer != nil {
		body.Customer = marshalCatalogCustomerDTOToCustomerDTOResponseBody(res.Customer)
	}
	if res.Cart != nil {
		body.Cart = marshalCatalogCartDTOToCartDTOResponseBody(res.Cart)
	}
	return body
}

// NewShowPurchaseResponseBody builds the HTTP response body from the result of
// the "show_purchase" endpoint of the "catalog" service.
func NewShowPurchaseResponseBody(res *catalog.PurchaseDTO) *ShowPurchaseResponseBody {
	body := &ShowPurchaseResponseBody{
		ID: res.ID,
	}
	if res.Customer != nil {
		body.Customer = marshalCatalogCustomerDTOToCustomerDTOResponseBody(res.Customer)
	}
	if res.Cart != nil {
		body.Cart = marshalCatalogCartDTOToCartDTOResponseBody(res.Cart)
	}
	return body
}

// NewCreateStateResponseBody builds the HTTP response body from the result of
// the "create_state" endpoint of the "catalog" service.
func NewCreateStateResponseBody(res *catalog.StateDTO) *CreateStateResponseBody {
	body := &CreateStateResponseBody{
		ID:        res.ID,
		Name:      res.Name,
		CountryID: res.CountryID,
	}
	return body
}

// NewListStatesResponseBody builds the HTTP response body from the result of
// the "list_states" endpoint of the "catalog" service.
func NewListStatesResponseBody(res []*catalog.StateDTO) ListStatesResponseBody {
	body := make([]*StateDTOResponse, len(res))
	for i, val := range res {
		body[i] = marshalCatalogStateDTOToStateDTOResponse(val)
	}
	return body
}

// NewShowStateResponseBody builds the HTTP response body from the result of
// the "show_state" endpoint of the "catalog" service.
func NewShowStateResponseBody(res *catalog.StateDTO) *ShowStateResponseBody {
	body := &ShowStateResponseBody{
		ID:        res.ID,
		Name:      res.Name,
		CountryID: res.CountryID,
	}
	return body
}

// NewCreateActorInvalidFieldsResponseBody builds the HTTP response body from
// the result of the "create_actor" endpoint of the "catalog" service.
func NewCreateActorInvalidFieldsResponseBody(res *goa.ServiceError) *CreateActorInvalidFieldsResponseBody {
	body := &CreateActorInvalidFieldsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowActorNotFoundResponseBody builds the HTTP response body from the
// result of the "show_actor" endpoint of the "catalog" service.
func NewShowActorNotFoundResponseBody(res *goa.ServiceError) *ShowActorNotFoundResponseBody {
	body := &ShowActorNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBookInvalidFieldsResponseBody builds the HTTP response body from
// the result of the "create_book" endpoint of the "catalog" service.
func NewCreateBookInvalidFieldsResponseBody(res *goa.ServiceError) *CreateBookInvalidFieldsResponseBody {
	body := &CreateBookInvalidFieldsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBookNotFoundResponseBody builds the HTTP response body from the
// result of the "show_book" endpoint of the "catalog" service.
func NewShowBookNotFoundResponseBody(res *goa.ServiceError) *ShowBookNotFoundResponseBody {
	body := &ShowBookNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCartInvalidFieldsResponseBody builds the HTTP response body from
// the result of the "create_cart" endpoint of the "catalog" service.
func NewCreateCartInvalidFieldsResponseBody(res *goa.ServiceError) *CreateCartInvalidFieldsResponseBody {
	body := &CreateCartInvalidFieldsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCategoryInvalidFieldsResponseBody builds the HTTP response body
// from the result of the "create_category" endpoint of the "catalog" service.
func NewCreateCategoryInvalidFieldsResponseBody(res *goa.ServiceError) *CreateCategoryInvalidFieldsResponseBody {
	body := &CreateCategoryInvalidFieldsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowCategoryNotFoundResponseBody builds the HTTP response body from the
// result of the "show_category" endpoint of the "catalog" service.
func NewShowCategoryNotFoundResponseBody(res *goa.ServiceError) *ShowCategoryNotFoundResponseBody {
	body := &ShowCategoryNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCountryInvalidFieldsResponseBody builds the HTTP response body from
// the result of the "create_country" endpoint of the "catalog" service.
func NewCreateCountryInvalidFieldsResponseBody(res *goa.ServiceError) *CreateCountryInvalidFieldsResponseBody {
	body := &CreateCountryInvalidFieldsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowCountryNotFoundResponseBody builds the HTTP response body from the
// result of the "show_country" endpoint of the "catalog" service.
func NewShowCountryNotFoundResponseBody(res *goa.ServiceError) *ShowCountryNotFoundResponseBody {
	body := &ShowCountryNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewApplyCouponInvalidFieldsResponseBody builds the HTTP response body from
// the result of the "apply_coupon" endpoint of the "catalog" service.
func NewApplyCouponInvalidFieldsResponseBody(res *goa.ServiceError) *ApplyCouponInvalidFieldsResponseBody {
	body := &ApplyCouponInvalidFieldsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCouponInvalidFieldsResponseBody builds the HTTP response body from
// the result of the "create_coupon" endpoint of the "catalog" service.
func NewCreateCouponInvalidFieldsResponseBody(res *goa.ServiceError) *CreateCouponInvalidFieldsResponseBody {
	body := &CreateCouponInvalidFieldsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCustomerInvalidFieldsResponseBody builds the HTTP response body
// from the result of the "create_customer" endpoint of the "catalog" service.
func NewCreateCustomerInvalidFieldsResponseBody(res *goa.ServiceError) *CreateCustomerInvalidFieldsResponseBody {
	body := &CreateCustomerInvalidFieldsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePurchaseInvalidFieldsResponseBody builds the HTTP response body
// from the result of the "create_purchase" endpoint of the "catalog" service.
func NewCreatePurchaseInvalidFieldsResponseBody(res *goa.ServiceError) *CreatePurchaseInvalidFieldsResponseBody {
	body := &CreatePurchaseInvalidFieldsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowPurchaseNotFoundResponseBody builds the HTTP response body from the
// result of the "show_purchase" endpoint of the "catalog" service.
func NewShowPurchaseNotFoundResponseBody(res *goa.ServiceError) *ShowPurchaseNotFoundResponseBody {
	body := &ShowPurchaseNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateStateInvalidFieldsResponseBody builds the HTTP response body from
// the result of the "create_state" endpoint of the "catalog" service.
func NewCreateStateInvalidFieldsResponseBody(res *goa.ServiceError) *CreateStateInvalidFieldsResponseBody {
	body := &CreateStateInvalidFieldsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowStateNotFoundResponseBody builds the HTTP response body from the
// result of the "show_state" endpoint of the "catalog" service.
func NewShowStateNotFoundResponseBody(res *goa.ServiceError) *ShowStateNotFoundResponseBody {
	body := &ShowStateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateActorDTO builds a catalog service create_actor endpoint payload.
func NewCreateActorDTO(body *CreateActorRequestBody) *catalog.CreateActorDTO {
	v := &catalog.CreateActorDTO{
		Name:        *body.Name,
		Email:       *body.Email,
		Description: *body.Description,
	}

	return v
}

// NewShowActorShowByIDDTO builds a catalog service show_actor endpoint payload.
func NewShowActorShowByIDDTO(id string) *catalog.ShowByIDDTO {
	v := &catalog.ShowByIDDTO{}
	v.ID = id

	return v
}

// NewCreateBookDTO builds a catalog service create_book endpoint payload.
func NewCreateBookDTO(body *CreateBookRequestBody) *catalog.CreateBookDTO {
	v := &catalog.CreateBookDTO{
		Title:    *body.Title,
		Synopsis: *body.Synopsis,
		Summary:  body.Summary,
		Price:    *body.Price,
		Pages:    *body.Pages,
		Isbn:     *body.Isbn,
		Issue:    *body.Issue,
	}
	v.CategoryIds = make([]string, len(body.CategoryIds))
	for i, val := range body.CategoryIds {
		v.CategoryIds[i] = val
	}
	v.ActorIds = make([]string, len(body.ActorIds))
	for i, val := range body.ActorIds {
		v.ActorIds[i] = val
	}

	return v
}

// NewShowBookShowByIDDTO builds a catalog service show_book endpoint payload.
func NewShowBookShowByIDDTO(id string) *catalog.ShowByIDDTO {
	v := &catalog.ShowByIDDTO{}
	v.ID = id

	return v
}

// NewCreateCartDTO builds a catalog service create_cart endpoint payload.
func NewCreateCartDTO(body *CreateCartRequestBody) *catalog.CreateCartDTO {
	v := &catalog.CreateCartDTO{
		Total:      *body.Total,
		CustomerID: body.CustomerID,
		CouponID:   body.CouponID,
	}
	v.Items = make([]*catalog.ItemDTO, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalItemDTORequestBodyToCatalogItemDTO(val)
	}

	return v
}

// NewCreateCategoryDTO builds a catalog service create_category endpoint
// payload.
func NewCreateCategoryDTO(body *CreateCategoryRequestBody) *catalog.CreateCategoryDTO {
	v := &catalog.CreateCategoryDTO{
		Name: *body.Name,
	}

	return v
}

// NewShowCategoryShowByIDDTO builds a catalog service show_category endpoint
// payload.
func NewShowCategoryShowByIDDTO(id string) *catalog.ShowByIDDTO {
	v := &catalog.ShowByIDDTO{}
	v.ID = id

	return v
}

// NewCreateCountryDTO builds a catalog service create_country endpoint payload.
func NewCreateCountryDTO(body *CreateCountryRequestBody) *catalog.CreateCountryDTO {
	v := &catalog.CreateCountryDTO{
		Name: *body.Name,
	}

	return v
}

// NewShowCountryShowByIDDTO builds a catalog service show_country endpoint
// payload.
func NewShowCountryShowByIDDTO(id string) *catalog.ShowByIDDTO {
	v := &catalog.ShowByIDDTO{}
	v.ID = id

	return v
}

// NewApplyCouponDTO builds a catalog service apply_coupon endpoint payload.
func NewApplyCouponDTO(body *ApplyCouponRequestBody) *catalog.ApplyCouponDTO {
	v := &catalog.ApplyCouponDTO{
		Code:       *body.Code,
		PurchaseID: *body.PurchaseID,
	}

	return v
}

// NewCreateCouponDTO builds a catalog service create_coupon endpoint payload.
func NewCreateCouponDTO(body *CreateCouponRequestBody) *catalog.CreateCouponDTO {
	v := &catalog.CreateCouponDTO{
		Code:     *body.Code,
		Discount: *body.Discount,
		Validity: *body.Validity,
	}

	return v
}

// NewCreateCustomerDTO builds a catalog service create_customer endpoint
// payload.
func NewCreateCustomerDTO(body *CreateCustomerRequestBody) *catalog.CreateCustomerDTO {
	v := &catalog.CreateCustomerDTO{
		FirstName: *body.FirstName,
		LastName:  *body.LastName,
		Email:     *body.Email,
		Document:  *body.Document,
		Phone:     *body.Phone,
	}
	v.Address = unmarshalAddressDTORequestBodyToCatalogAddressDTO(body.Address)
	if body.CartIds != nil {
		v.CartIds = make([]string, len(body.CartIds))
		for i, val := range body.CartIds {
			v.CartIds[i] = val
		}
	}

	return v
}

// NewCreatePurchaseDTO builds a catalog service create_purchase endpoint
// payload.
func NewCreatePurchaseDTO(body *CreatePurchaseRequestBody) *catalog.CreatePurchaseDTO {
	v := &catalog.CreatePurchaseDTO{}
	v.Customer = unmarshalCreateCustomerDTORequestBodyToCatalogCreateCustomerDTO(body.Customer)
	v.Cart = unmarshalCreateCartDTORequestBodyToCatalogCreateCartDTO(body.Cart)

	return v
}

// NewShowPurchaseShowByIDDTO builds a catalog service show_purchase endpoint
// payload.
func NewShowPurchaseShowByIDDTO(id string) *catalog.ShowByIDDTO {
	v := &catalog.ShowByIDDTO{}
	v.ID = id

	return v
}

// NewCreateStateDTO builds a catalog service create_state endpoint payload.
func NewCreateStateDTO(body *CreateStateRequestBody) *catalog.CreateStateDTO {
	v := &catalog.CreateStateDTO{
		Name:      *body.Name,
		CountryID: *body.CountryID,
	}

	return v
}

// NewShowStateShowByIDDTO builds a catalog service show_state endpoint payload.
func NewShowStateShowByIDDTO(id string) *catalog.ShowByIDDTO {
	v := &catalog.ShowByIDDTO{}
	v.ID = id

	return v
}

// ValidateCreateActorRequestBody runs the validations defined on
// create_actor_request_body
func ValidateCreateActorRequestBody(body *CreateActorRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 400 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 400, false))
		}
	}
	return
}

// ValidateCreateBookRequestBody runs the validations defined on
// create_book_request_body
func ValidateCreateBookRequestBody(body *CreateBookRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Synopsis == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("synopsis", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Pages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pages", "body"))
	}
	if body.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isbn", "body"))
	}
	if body.Issue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("issue", "body"))
	}
	if body.CategoryIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category_ids", "body"))
	}
	if body.ActorIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actor_ids", "body"))
	}
	if body.Synopsis != nil {
		if utf8.RuneCountInString(*body.Synopsis) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.synopsis", *body.Synopsis, utf8.RuneCountInString(*body.Synopsis), 500, false))
		}
	}
	if body.Price != nil {
		if *body.Price < 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 20, true))
		}
	}
	if body.Pages != nil {
		if *body.Pages < 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.pages", *body.Pages, 100, true))
		}
	}
	return
}

// ValidateCreateCartRequestBody runs the validations defined on
// create_cart_request_body
func ValidateCreateCartRequestBody(body *CreateCartRequestBody) (err error) {
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if len(body.Items) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.items", body.Items, len(body.Items), 1, true))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateItemDTORequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateCategoryRequestBody runs the validations defined on
// create_category_request_body
func ValidateCreateCategoryRequestBody(body *CreateCategoryRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateCreateCountryRequestBody runs the validations defined on
// create_country_request_body
func ValidateCreateCountryRequestBody(body *CreateCountryRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateApplyCouponRequestBody runs the validations defined on
// apply_coupon_request_body
func ValidateApplyCouponRequestBody(body *ApplyCouponRequestBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.PurchaseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("purchase_id", "body"))
	}
	return
}

// ValidateCreateCouponRequestBody runs the validations defined on
// create_coupon_request_body
func ValidateCreateCouponRequestBody(body *CreateCouponRequestBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Discount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("discount", "body"))
	}
	if body.Validity == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("validity", "body"))
	}
	if body.Discount != nil {
		if *body.Discount < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.discount", *body.Discount, 0, true))
		}
	}
	return
}

// ValidateCreateCustomerRequestBody runs the validations defined on
// create_customer_request_body
func ValidateCreateCustomerRequestBody(body *CreateCustomerRequestBody) (err error) {
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Document == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("document", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Phone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phone", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Address != nil {
		if err2 := ValidateAddressDTORequestBody(body.Address); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreatePurchaseRequestBody runs the validations defined on
// create_purchase_request_body
func ValidateCreatePurchaseRequestBody(body *CreatePurchaseRequestBody) (err error) {
	if body.Customer == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer", "body"))
	}
	if body.Cart == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cart", "body"))
	}
	if body.Customer != nil {
		if err2 := ValidateCreateCustomerDTORequestBody(body.Customer); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Cart != nil {
		if err2 := ValidateCreateCartDTORequestBody(body.Cart); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateStateRequestBody runs the validations defined on
// create_state_request_body
func ValidateCreateStateRequestBody(body *CreateStateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.CountryID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("country_id", "body"))
	}
	return
}

// ValidateItemDTORequestBody runs the validations defined on ItemDTORequestBody
func ValidateItemDTORequestBody(body *ItemDTORequestBody) (err error) {
	if body.BookID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("book_id", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "body"))
	}
	if body.Amount != nil {
		if *body.Amount < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.amount", *body.Amount, 1, true))
		}
	}
	return
}

// ValidateAddressDTORequestBody runs the validations defined on
// AddressDTORequestBody
func ValidateAddressDTORequestBody(body *AddressDTORequestBody) (err error) {
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Complement == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("complement", "body"))
	}
	if body.City == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("city", "body"))
	}
	if body.StateID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("state_id", "body"))
	}
	if body.Cep == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cep", "body"))
	}
	return
}

// ValidateCreateCustomerDTORequestBody runs the validations defined on
// CreateCustomerDTORequestBody
func ValidateCreateCustomerDTORequestBody(body *CreateCustomerDTORequestBody) (err error) {
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Document == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("document", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Phone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phone", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Address != nil {
		if err2 := ValidateAddressDTORequestBody(body.Address); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateCartDTORequestBody runs the validations defined on
// CreateCartDTORequestBody
func ValidateCreateCartDTORequestBody(body *CreateCartDTORequestBody) (err error) {
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if len(body.Items) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.items", body.Items, len(body.Items), 1, true))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateItemDTORequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
