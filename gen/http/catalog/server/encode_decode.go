// Code generated by goa v3.2.4, DO NOT EDIT.
//
// catalog HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package server

import (
	"context"
	"io"
	"net/http"

	catalog "github.com/selmison/seed-desafio-cdc/gen/catalog"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateActorResponse returns an encoder for responses returned by the
// catalog create_actor endpoint.
func EncodeCreateActorResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*catalog.ActorDTO)
		enc := encoder(ctx, w)
		body := NewCreateActorResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateActorRequest returns a decoder for requests sent to the catalog
// create_actor endpoint.
func DecodeCreateActorRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateActorRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateActorRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateActorDTO(&body)

		return payload, nil
	}
}

// EncodeCreateActorError returns an encoder for errors returned by the
// create_actor catalog endpoint.
func EncodeCreateActorError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalid_fields":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateActorInvalidFieldsResponseBody(res)
			}
			w.Header().Set("goa-error", "invalid_fields")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListActorsResponse returns an encoder for responses returned by the
// catalog list_actors endpoint.
func EncodeListActorsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.([]*catalog.ActorDTO)
		enc := encoder(ctx, w)
		body := NewListActorsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeShowActorResponse returns an encoder for responses returned by the
// catalog show_actor endpoint.
func EncodeShowActorResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*catalog.ActorDTO)
		enc := encoder(ctx, w)
		body := NewShowActorResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeShowActorRequest returns a decoder for requests sent to the catalog
// show_actor endpoint.
func DecodeShowActorRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewShowActorShowByIDDTO(id)

		return payload, nil
	}
}

// EncodeShowActorError returns an encoder for errors returned by the
// show_actor catalog endpoint.
func EncodeShowActorError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowActorNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateBookResponse returns an encoder for responses returned by the
// catalog create_book endpoint.
func EncodeCreateBookResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*catalog.BookDTO)
		enc := encoder(ctx, w)
		body := NewCreateBookResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateBookRequest returns a decoder for requests sent to the catalog
// create_book endpoint.
func DecodeCreateBookRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateBookRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateBookRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateBookDTO(&body)

		return payload, nil
	}
}

// EncodeCreateBookError returns an encoder for errors returned by the
// create_book catalog endpoint.
func EncodeCreateBookError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalid_fields":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateBookInvalidFieldsResponseBody(res)
			}
			w.Header().Set("goa-error", "invalid_fields")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListBooksResponse returns an encoder for responses returned by the
// catalog list_books endpoint.
func EncodeListBooksResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.([]*catalog.BookDTO)
		enc := encoder(ctx, w)
		body := NewListBooksResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeShowBookResponse returns an encoder for responses returned by the
// catalog show_book endpoint.
func EncodeShowBookResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*catalog.BookDTO)
		enc := encoder(ctx, w)
		body := NewShowBookResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeShowBookRequest returns a decoder for requests sent to the catalog
// show_book endpoint.
func DecodeShowBookRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewShowBookShowByIDDTO(id)

		return payload, nil
	}
}

// EncodeShowBookError returns an encoder for errors returned by the show_book
// catalog endpoint.
func EncodeShowBookError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowBookNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateCartResponse returns an encoder for responses returned by the
// catalog create_cart endpoint.
func EncodeCreateCartResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*catalog.CartDTO)
		enc := encoder(ctx, w)
		body := NewCreateCartResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateCartRequest returns a decoder for requests sent to the catalog
// create_cart endpoint.
func DecodeCreateCartRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateCartRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateCartRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateCartDTO(&body)

		return payload, nil
	}
}

// EncodeCreateCartError returns an encoder for errors returned by the
// create_cart catalog endpoint.
func EncodeCreateCartError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalid_fields":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCartInvalidFieldsResponseBody(res)
			}
			w.Header().Set("goa-error", "invalid_fields")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateCategoryResponse returns an encoder for responses returned by
// the catalog create_category endpoint.
func EncodeCreateCategoryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*catalog.CategoryDTO)
		enc := encoder(ctx, w)
		body := NewCreateCategoryResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateCategoryRequest returns a decoder for requests sent to the
// catalog create_category endpoint.
func DecodeCreateCategoryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateCategoryRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateCategoryRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateCategoryDTO(&body)

		return payload, nil
	}
}

// EncodeCreateCategoryError returns an encoder for errors returned by the
// create_category catalog endpoint.
func EncodeCreateCategoryError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalid_fields":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCategoryInvalidFieldsResponseBody(res)
			}
			w.Header().Set("goa-error", "invalid_fields")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListCategoriesResponse returns an encoder for responses returned by
// the catalog list_categories endpoint.
func EncodeListCategoriesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.([]*catalog.CategoryDTO)
		enc := encoder(ctx, w)
		body := NewListCategoriesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeShowCategoryResponse returns an encoder for responses returned by the
// catalog show_category endpoint.
func EncodeShowCategoryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*catalog.CategoryDTO)
		enc := encoder(ctx, w)
		body := NewShowCategoryResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeShowCategoryRequest returns a decoder for requests sent to the catalog
// show_category endpoint.
func DecodeShowCategoryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewShowCategoryShowByIDDTO(id)

		return payload, nil
	}
}

// EncodeShowCategoryError returns an encoder for errors returned by the
// show_category catalog endpoint.
func EncodeShowCategoryError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowCategoryNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateCountryResponse returns an encoder for responses returned by the
// catalog create_country endpoint.
func EncodeCreateCountryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*catalog.CountryDTO)
		enc := encoder(ctx, w)
		body := NewCreateCountryResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateCountryRequest returns a decoder for requests sent to the
// catalog create_country endpoint.
func DecodeCreateCountryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateCountryRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateCountryRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateCountryDTO(&body)

		return payload, nil
	}
}

// EncodeCreateCountryError returns an encoder for errors returned by the
// create_country catalog endpoint.
func EncodeCreateCountryError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalid_fields":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCountryInvalidFieldsResponseBody(res)
			}
			w.Header().Set("goa-error", "invalid_fields")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListCountriesResponse returns an encoder for responses returned by the
// catalog list_countries endpoint.
func EncodeListCountriesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.([]*catalog.CountryDTO)
		enc := encoder(ctx, w)
		body := NewListCountriesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeShowCountryResponse returns an encoder for responses returned by the
// catalog show_country endpoint.
func EncodeShowCountryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*catalog.CountryDTO)
		enc := encoder(ctx, w)
		body := NewShowCountryResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeShowCountryRequest returns a decoder for requests sent to the catalog
// show_country endpoint.
func DecodeShowCountryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewShowCountryShowByIDDTO(id)

		return payload, nil
	}
}

// EncodeShowCountryError returns an encoder for errors returned by the
// show_country catalog endpoint.
func EncodeShowCountryError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowCountryNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateCouponResponse returns an encoder for responses returned by the
// catalog create_coupon endpoint.
func EncodeCreateCouponResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*catalog.CouponDTO)
		enc := encoder(ctx, w)
		body := NewCreateCouponResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateCouponRequest returns a decoder for requests sent to the catalog
// create_coupon endpoint.
func DecodeCreateCouponRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateCouponRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateCouponRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateCouponDTO(&body)

		return payload, nil
	}
}

// EncodeCreateCouponError returns an encoder for errors returned by the
// create_coupon catalog endpoint.
func EncodeCreateCouponError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalid_fields":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCouponInvalidFieldsResponseBody(res)
			}
			w.Header().Set("goa-error", "invalid_fields")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateCustomerResponse returns an encoder for responses returned by
// the catalog create_customer endpoint.
func EncodeCreateCustomerResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*catalog.CustomerDTO)
		enc := encoder(ctx, w)
		body := NewCreateCustomerResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateCustomerRequest returns a decoder for requests sent to the
// catalog create_customer endpoint.
func DecodeCreateCustomerRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateCustomerRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateCustomerRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateCustomerDTO(&body)

		return payload, nil
	}
}

// EncodeCreateCustomerError returns an encoder for errors returned by the
// create_customer catalog endpoint.
func EncodeCreateCustomerError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalid_fields":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCustomerInvalidFieldsResponseBody(res)
			}
			w.Header().Set("goa-error", "invalid_fields")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreatePurchaseResponse returns an encoder for responses returned by
// the catalog create_purchase endpoint.
func EncodeCreatePurchaseResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*catalog.PurchaseDTO)
		enc := encoder(ctx, w)
		body := NewCreatePurchaseResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreatePurchaseRequest returns a decoder for requests sent to the
// catalog create_purchase endpoint.
func DecodeCreatePurchaseRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreatePurchaseRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreatePurchaseRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreatePurchaseDTO(&body)

		return payload, nil
	}
}

// EncodeCreatePurchaseError returns an encoder for errors returned by the
// create_purchase catalog endpoint.
func EncodeCreatePurchaseError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalid_fields":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreatePurchaseInvalidFieldsResponseBody(res)
			}
			w.Header().Set("goa-error", "invalid_fields")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateStateResponse returns an encoder for responses returned by the
// catalog create_state endpoint.
func EncodeCreateStateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*catalog.StateDTO)
		enc := encoder(ctx, w)
		body := NewCreateStateResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateStateRequest returns a decoder for requests sent to the catalog
// create_state endpoint.
func DecodeCreateStateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateStateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateStateRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateStateDTO(&body)

		return payload, nil
	}
}

// EncodeCreateStateError returns an encoder for errors returned by the
// create_state catalog endpoint.
func EncodeCreateStateError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalid_fields":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateStateInvalidFieldsResponseBody(res)
			}
			w.Header().Set("goa-error", "invalid_fields")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListStatesResponse returns an encoder for responses returned by the
// catalog list_states endpoint.
func EncodeListStatesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.([]*catalog.StateDTO)
		enc := encoder(ctx, w)
		body := NewListStatesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeShowStateResponse returns an encoder for responses returned by the
// catalog show_state endpoint.
func EncodeShowStateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*catalog.StateDTO)
		enc := encoder(ctx, w)
		body := NewShowStateResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeShowStateRequest returns a decoder for requests sent to the catalog
// show_state endpoint.
func DecodeShowStateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewShowStateShowByIDDTO(id)

		return payload, nil
	}
}

// EncodeShowStateError returns an encoder for errors returned by the
// show_state catalog endpoint.
func EncodeShowStateError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewShowStateNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalCatalogActorDTOToActorDTOResponse builds a value of type
// *ActorDTOResponse from a value of type *catalog.ActorDTO.
func marshalCatalogActorDTOToActorDTOResponse(v *catalog.ActorDTO) *ActorDTOResponse {
	res := &ActorDTOResponse{
		ID:          v.ID,
		Name:        v.Name,
		Email:       v.Email,
		Description: v.Description,
		CreatedAt:   v.CreatedAt,
	}

	return res
}

// marshalCatalogBookDTOToBookDTOResponse builds a value of type
// *BookDTOResponse from a value of type *catalog.BookDTO.
func marshalCatalogBookDTOToBookDTOResponse(v *catalog.BookDTO) *BookDTOResponse {
	res := &BookDTOResponse{
		ID:       v.ID,
		Title:    v.Title,
		Synopsis: v.Synopsis,
		Summary:  v.Summary,
		Price:    v.Price,
		Pages:    v.Pages,
		Isbn:     v.Isbn,
		Issue:    v.Issue,
	}
	if v.CategoryIds != nil {
		res.CategoryIds = make([]string, len(v.CategoryIds))
		for i, val := range v.CategoryIds {
			res.CategoryIds[i] = val
		}
	}
	if v.ActorIds != nil {
		res.ActorIds = make([]string, len(v.ActorIds))
		for i, val := range v.ActorIds {
			res.ActorIds[i] = val
		}
	}

	return res
}

// unmarshalItemDTORequestBodyToCatalogItemDTO builds a value of type
// *catalog.ItemDTO from a value of type *ItemDTORequestBody.
func unmarshalItemDTORequestBodyToCatalogItemDTO(v *ItemDTORequestBody) *catalog.ItemDTO {
	res := &catalog.ItemDTO{
		BookID: *v.BookID,
		Amount: *v.Amount,
	}

	return res
}

// marshalCatalogItemDTOToItemDTOResponseBody builds a value of type
// *ItemDTOResponseBody from a value of type *catalog.ItemDTO.
func marshalCatalogItemDTOToItemDTOResponseBody(v *catalog.ItemDTO) *ItemDTOResponseBody {
	res := &ItemDTOResponseBody{
		BookID: v.BookID,
		Amount: v.Amount,
	}

	return res
}

// marshalCatalogCategoryDTOToCategoryDTOResponse builds a value of type
// *CategoryDTOResponse from a value of type *catalog.CategoryDTO.
func marshalCatalogCategoryDTOToCategoryDTOResponse(v *catalog.CategoryDTO) *CategoryDTOResponse {
	res := &CategoryDTOResponse{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}

// marshalCatalogCountryDTOToCountryDTOResponse builds a value of type
// *CountryDTOResponse from a value of type *catalog.CountryDTO.
func marshalCatalogCountryDTOToCountryDTOResponse(v *catalog.CountryDTO) *CountryDTOResponse {
	res := &CountryDTOResponse{
		ID:       v.ID,
		Name:     v.Name,
		StateIds: v.StateIds,
	}

	return res
}

// unmarshalAddressDTORequestBodyToCatalogAddressDTO builds a value of type
// *catalog.AddressDTO from a value of type *AddressDTORequestBody.
func unmarshalAddressDTORequestBodyToCatalogAddressDTO(v *AddressDTORequestBody) *catalog.AddressDTO {
	res := &catalog.AddressDTO{
		Address:    *v.Address,
		Complement: *v.Complement,
		City:       *v.City,
		StateID:    *v.StateID,
		Cep:        *v.Cep,
	}

	return res
}

// marshalCatalogAddressDTOToAddressDTOResponseBody builds a value of type
// *AddressDTOResponseBody from a value of type *catalog.AddressDTO.
func marshalCatalogAddressDTOToAddressDTOResponseBody(v *catalog.AddressDTO) *AddressDTOResponseBody {
	res := &AddressDTOResponseBody{
		Address:    v.Address,
		Complement: v.Complement,
		City:       v.City,
		StateID:    v.StateID,
		Cep:        v.Cep,
	}

	return res
}

// unmarshalCreateCustomerDTORequestBodyToCatalogCreateCustomerDTO builds a
// value of type *catalog.CreateCustomerDTO from a value of type
// *CreateCustomerDTORequestBody.
func unmarshalCreateCustomerDTORequestBodyToCatalogCreateCustomerDTO(v *CreateCustomerDTORequestBody) *catalog.CreateCustomerDTO {
	res := &catalog.CreateCustomerDTO{
		FirstName: *v.FirstName,
		LastName:  *v.LastName,
		Email:     *v.Email,
		Document:  *v.Document,
		Phone:     *v.Phone,
	}
	res.Address = unmarshalAddressDTORequestBodyToCatalogAddressDTO(v.Address)
	if v.CartIds != nil {
		res.CartIds = make([]string, len(v.CartIds))
		for i, val := range v.CartIds {
			res.CartIds[i] = val
		}
	}

	return res
}

// unmarshalCreateCartDTORequestBodyToCatalogCreateCartDTO builds a value of
// type *catalog.CreateCartDTO from a value of type *CreateCartDTORequestBody.
func unmarshalCreateCartDTORequestBodyToCatalogCreateCartDTO(v *CreateCartDTORequestBody) *catalog.CreateCartDTO {
	res := &catalog.CreateCartDTO{
		Total:      *v.Total,
		CustomerID: v.CustomerID,
		CouponID:   v.CouponID,
	}
	res.Items = make([]*catalog.ItemDTO, len(v.Items))
	for i, val := range v.Items {
		res.Items[i] = unmarshalItemDTORequestBodyToCatalogItemDTO(val)
	}

	return res
}

// marshalCatalogCustomerDTOToCustomerDTOResponseBody builds a value of type
// *CustomerDTOResponseBody from a value of type *catalog.CustomerDTO.
func marshalCatalogCustomerDTOToCustomerDTOResponseBody(v *catalog.CustomerDTO) *CustomerDTOResponseBody {
	res := &CustomerDTOResponseBody{
		ID:        v.ID,
		FirstName: v.FirstName,
		LastName:  v.LastName,
		Email:     v.Email,
		Document:  v.Document,
		Phone:     v.Phone,
	}
	if v.Address != nil {
		res.Address = marshalCatalogAddressDTOToAddressDTOResponseBody(v.Address)
	}
	if v.CartIds != nil {
		res.CartIds = make([]string, len(v.CartIds))
		for i, val := range v.CartIds {
			res.CartIds[i] = val
		}
	}

	return res
}

// marshalCatalogCartDTOToCartDTOResponseBody builds a value of type
// *CartDTOResponseBody from a value of type *catalog.CartDTO.
func marshalCatalogCartDTOToCartDTOResponseBody(v *catalog.CartDTO) *CartDTOResponseBody {
	res := &CartDTOResponseBody{
		ID:         v.ID,
		Total:      v.Total,
		CustomerID: v.CustomerID,
		CouponID:   v.CouponID,
	}
	if v.Items != nil {
		res.Items = make([]*ItemDTOResponseBody, len(v.Items))
		for i, val := range v.Items {
			res.Items[i] = marshalCatalogItemDTOToItemDTOResponseBody(val)
		}
	}

	return res
}

// marshalCatalogStateDTOToStateDTOResponse builds a value of type
// *StateDTOResponse from a value of type *catalog.StateDTO.
func marshalCatalogStateDTOToStateDTOResponse(v *catalog.StateDTO) *StateDTOResponse {
	res := &StateDTOResponse{
		ID:        v.ID,
		Name:      v.Name,
		CountryID: v.CountryID,
	}

	return res
}
