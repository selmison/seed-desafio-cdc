// Code generated by goa v3.2.4, DO NOT EDIT.
//
// catalog go-kit HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package server

import (
	"context"
	"net/http"

	kithttp "github.com/go-kit/kit/transport/http"
	"github.com/selmison/seed-desafio-cdc/gen/http/catalog/server"
	goahttp "goa.design/goa/v3/http"
)

// EncodeCreateActorResponse returns a go-kit EncodeResponseFunc suitable for
// encoding catalog create_actor responses.
func EncodeCreateActorResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeCreateActorResponse(encoder)
}

// DecodeCreateActorRequest returns a go-kit DecodeRequestFunc suitable for
// decoding catalog create_actor requests.
func DecodeCreateActorRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeCreateActorRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeCreateActorError returns a go-kit EncodeResponseFunc suitable for
// encoding errors returned by the catalog create_actor endpoint.
func EncodeCreateActorError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeCreateActorError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeShowActorResponse returns a go-kit EncodeResponseFunc suitable for
// encoding catalog show_actor responses.
func EncodeShowActorResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeShowActorResponse(encoder)
}

// DecodeShowActorRequest returns a go-kit DecodeRequestFunc suitable for
// decoding catalog show_actor requests.
func DecodeShowActorRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeShowActorRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeShowActorError returns a go-kit EncodeResponseFunc suitable for
// encoding errors returned by the catalog show_actor endpoint.
func EncodeShowActorError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeShowActorError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeCreateBookResponse returns a go-kit EncodeResponseFunc suitable for
// encoding catalog create_book responses.
func EncodeCreateBookResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeCreateBookResponse(encoder)
}

// DecodeCreateBookRequest returns a go-kit DecodeRequestFunc suitable for
// decoding catalog create_book requests.
func DecodeCreateBookRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeCreateBookRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeCreateBookError returns a go-kit EncodeResponseFunc suitable for
// encoding errors returned by the catalog create_book endpoint.
func EncodeCreateBookError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeCreateBookError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeListBooksResponse returns a go-kit EncodeResponseFunc suitable for
// encoding catalog list_books responses.
func EncodeListBooksResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeListBooksResponse(encoder)
}

// EncodeShowBookResponse returns a go-kit EncodeResponseFunc suitable for
// encoding catalog show_book responses.
func EncodeShowBookResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeShowBookResponse(encoder)
}

// DecodeShowBookRequest returns a go-kit DecodeRequestFunc suitable for
// decoding catalog show_book requests.
func DecodeShowBookRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeShowBookRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeShowBookError returns a go-kit EncodeResponseFunc suitable for
// encoding errors returned by the catalog show_book endpoint.
func EncodeShowBookError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeShowBookError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeCreateCategoryResponse returns a go-kit EncodeResponseFunc suitable
// for encoding catalog create_category responses.
func EncodeCreateCategoryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeCreateCategoryResponse(encoder)
}

// DecodeCreateCategoryRequest returns a go-kit DecodeRequestFunc suitable for
// decoding catalog create_category requests.
func DecodeCreateCategoryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeCreateCategoryRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeCreateCategoryError returns a go-kit EncodeResponseFunc suitable for
// encoding errors returned by the catalog create_category endpoint.
func EncodeCreateCategoryError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeCreateCategoryError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeShowCategoryResponse returns a go-kit EncodeResponseFunc suitable for
// encoding catalog show_category responses.
func EncodeShowCategoryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeShowCategoryResponse(encoder)
}

// DecodeShowCategoryRequest returns a go-kit DecodeRequestFunc suitable for
// decoding catalog show_category requests.
func DecodeShowCategoryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeShowCategoryRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeShowCategoryError returns a go-kit EncodeResponseFunc suitable for
// encoding errors returned by the catalog show_category endpoint.
func EncodeShowCategoryError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeShowCategoryError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeCreateCountryResponse returns a go-kit EncodeResponseFunc suitable for
// encoding catalog create_country responses.
func EncodeCreateCountryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeCreateCountryResponse(encoder)
}

// DecodeCreateCountryRequest returns a go-kit DecodeRequestFunc suitable for
// decoding catalog create_country requests.
func DecodeCreateCountryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeCreateCountryRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeCreateCountryError returns a go-kit EncodeResponseFunc suitable for
// encoding errors returned by the catalog create_country endpoint.
func EncodeCreateCountryError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeCreateCountryError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeCreateStateResponse returns a go-kit EncodeResponseFunc suitable for
// encoding catalog create_state responses.
func EncodeCreateStateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeCreateStateResponse(encoder)
}

// DecodeCreateStateRequest returns a go-kit DecodeRequestFunc suitable for
// decoding catalog create_state requests.
func DecodeCreateStateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeCreateStateRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeCreateStateError returns a go-kit EncodeResponseFunc suitable for
// encoding errors returned by the catalog create_state endpoint.
func EncodeCreateStateError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeCreateStateError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}
