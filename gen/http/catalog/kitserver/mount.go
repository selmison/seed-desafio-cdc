// Code generated by goa v3.2.4, DO NOT EDIT.
//
// catalog go-kit HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package server

import (
	"net/http"

	goahttp "goa.design/goa/v3/http"
)

// MountCreateActorHandler configures the mux to serve the "catalog" service
// "create_actor" endpoint.
func MountCreateActorHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/actors", f)
}

// MountListActorsHandler configures the mux to serve the "catalog" service
// "list_actors" endpoint.
func MountListActorsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/actors", f)
}

// MountShowActorHandler configures the mux to serve the "catalog" service
// "show_actor" endpoint.
func MountShowActorHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/actors/{id}", f)
}

// MountCreateBookHandler configures the mux to serve the "catalog" service
// "create_book" endpoint.
func MountCreateBookHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/books", f)
}

// MountListBooksHandler configures the mux to serve the "catalog" service
// "list_books" endpoint.
func MountListBooksHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/books", f)
}

// MountShowBookHandler configures the mux to serve the "catalog" service
// "show_book" endpoint.
func MountShowBookHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/books/{id}", f)
}

// MountCreateCartHandler configures the mux to serve the "catalog" service
// "create_cart" endpoint.
func MountCreateCartHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/carts", f)
}

// MountCreateCategoryHandler configures the mux to serve the "catalog" service
// "create_category" endpoint.
func MountCreateCategoryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/categories", f)
}

// MountListCategoriesHandler configures the mux to serve the "catalog" service
// "list_categories" endpoint.
func MountListCategoriesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/categories", f)
}

// MountShowCategoryHandler configures the mux to serve the "catalog" service
// "show_category" endpoint.
func MountShowCategoryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/categories/{id}", f)
}

// MountCreateCountryHandler configures the mux to serve the "catalog" service
// "create_country" endpoint.
func MountCreateCountryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/countries", f)
}

// MountListCountriesHandler configures the mux to serve the "catalog" service
// "list_countries" endpoint.
func MountListCountriesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/countries", f)
}

// MountShowCountryHandler configures the mux to serve the "catalog" service
// "show_country" endpoint.
func MountShowCountryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/countries/{id}", f)
}

// MountCreateCouponHandler configures the mux to serve the "catalog" service
// "create_coupon" endpoint.
func MountCreateCouponHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/coupons", f)
}

// MountCreateCustomerHandler configures the mux to serve the "catalog" service
// "create_customer" endpoint.
func MountCreateCustomerHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/customers", f)
}

// MountCreatePurchaseHandler configures the mux to serve the "catalog" service
// "create_purchase" endpoint.
func MountCreatePurchaseHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/purchases", f)
}

// MountCreateStateHandler configures the mux to serve the "catalog" service
// "create_state" endpoint.
func MountCreateStateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/states", f)
}

// MountListStatesHandler configures the mux to serve the "catalog" service
// "list_states" endpoint.
func MountListStatesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/states", f)
}

// MountShowStateHandler configures the mux to serve the "catalog" service
// "show_state" endpoint.
func MountShowStateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/states/{id}", f)
}
