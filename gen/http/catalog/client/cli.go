// Code generated by goa v3.2.4, DO NOT EDIT.
//
// catalog HTTP client CLI support package
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	catalog "github.com/selmison/seed-desafio-cdc/gen/catalog"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateActorPayload builds the payload for the catalog create_actor
// endpoint from CLI flags.
func BuildCreateActorPayload(catalogCreateActorBody string) (*catalog.CreateActorDTO, error) {
	var err error
	var body CreateActorRequestBody
	{
		err = json.Unmarshal([]byte(catalogCreateActorBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"2av\",\n      \"email\": \"name.collins@stokeswaters.net\",\n      \"name\": \"Dolorem mollitia inventore non et aut ipsum.\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))

		if utf8.RuneCountInString(body.Description) > 400 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", body.Description, utf8.RuneCountInString(body.Description), 400, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &catalog.CreateActorDTO{
		Name:        body.Name,
		Email:       body.Email,
		Description: body.Description,
	}

	return v, nil
}

// BuildShowActorPayload builds the payload for the catalog show_actor endpoint
// from CLI flags.
func BuildShowActorPayload(catalogShowActorID string) (*catalog.ShowByIDDTO, error) {
	var id string
	{
		id = catalogShowActorID
	}
	v := &catalog.ShowByIDDTO{}
	v.ID = id

	return v, nil
}

// BuildCreateBookPayload builds the payload for the catalog create_book
// endpoint from CLI flags.
func BuildCreateBookPayload(catalogCreateBookBody string) (*catalog.CreateBookDTO, error) {
	var err error
	var body CreateBookRequestBody
	{
		err = json.Unmarshal([]byte(catalogCreateBookBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"actor_ids\": [\n         \"Eaque est provident ducimus pariatur.\",\n         \"Labore est quos est asperiores provident inventore.\",\n         \"Sed assumenda accusantium.\",\n         \"Expedita illo ut.\"\n      ],\n      \"category_ids\": [\n         \"Magni dignissimos est ullam repellendus nesciunt magni.\",\n         \"Quaerat doloribus nisi.\",\n         \"Et ab.\"\n      ],\n      \"isbn\": \"Voluptates ullam voluptate et omnis sapiente velit.\",\n      \"issue\": \"Iure numquam sit aut.\",\n      \"pages\": 4886361267009213310,\n      \"price\": 20.650381,\n      \"summary\": \"Corporis exercitationem eos autem corporis dolores.\",\n      \"synopsis\": \"hxq\",\n      \"title\": \"Exercitationem sunt illum optio sed dolores aut.\"\n   }'")
		}
		if body.CategoryIds == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("category_ids", "body"))
		}
		if body.ActorIds == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("actor_ids", "body"))
		}
		if utf8.RuneCountInString(body.Synopsis) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.synopsis", body.Synopsis, utf8.RuneCountInString(body.Synopsis), 500, false))
		}
		if body.Price < 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", body.Price, 20, true))
		}
		if body.Pages < 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.pages", body.Pages, 100, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &catalog.CreateBookDTO{
		Title:    body.Title,
		Synopsis: body.Synopsis,
		Summary:  body.Summary,
		Price:    body.Price,
		Pages:    body.Pages,
		Isbn:     body.Isbn,
		Issue:    body.Issue,
	}
	if body.CategoryIds != nil {
		v.CategoryIds = make([]string, len(body.CategoryIds))
		for i, val := range body.CategoryIds {
			v.CategoryIds[i] = val
		}
	}
	if body.ActorIds != nil {
		v.ActorIds = make([]string, len(body.ActorIds))
		for i, val := range body.ActorIds {
			v.ActorIds[i] = val
		}
	}

	return v, nil
}

// BuildShowBookPayload builds the payload for the catalog show_book endpoint
// from CLI flags.
func BuildShowBookPayload(catalogShowBookID string) (*catalog.ShowByIDDTO, error) {
	var id string
	{
		id = catalogShowBookID
	}
	v := &catalog.ShowByIDDTO{}
	v.ID = id

	return v, nil
}

// BuildCreateCategoryPayload builds the payload for the catalog
// create_category endpoint from CLI flags.
func BuildCreateCategoryPayload(catalogCreateCategoryBody string) (*catalog.CreateCategoryDTO, error) {
	var err error
	var body CreateCategoryRequestBody
	{
		err = json.Unmarshal([]byte(catalogCreateCategoryBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Quo cupiditate minus tempore maxime.\"\n   }'")
		}
	}
	v := &catalog.CreateCategoryDTO{
		Name: body.Name,
	}

	return v, nil
}

// BuildShowCategoryPayload builds the payload for the catalog show_category
// endpoint from CLI flags.
func BuildShowCategoryPayload(catalogShowCategoryID string) (*catalog.ShowByIDDTO, error) {
	var id string
	{
		id = catalogShowCategoryID
	}
	v := &catalog.ShowByIDDTO{}
	v.ID = id

	return v, nil
}

// BuildCreateCustomerPayload builds the payload for the catalog
// create_customer endpoint from CLI flags.
func BuildCreateCustomerPayload(catalogCreateCustomerBody string) (*catalog.CreateCustomerDTO, error) {
	var err error
	var body CreateCustomerRequestBody
	{
		err = json.Unmarshal([]byte(catalogCreateCustomerBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"address\": {\n         \"address\": \"Sit delectus et et ea officiis.\",\n         \"cep\": \"Repellat est praesentium nostrum excepturi voluptas explicabo.\",\n         \"city\": \"Accusamus repudiandae sed sed maiores qui.\",\n         \"complement\": \"Voluptas dicta.\",\n         \"country_id\": \"Rem rem.\",\n         \"state_id\": \"Veritatis amet consequatur error eos.\"\n      },\n      \"document\": \"Nam veritatis.\",\n      \"email\": \"broderick_beatty@farrellharvey.com\",\n      \"first_name\": \"Nam est.\",\n      \"last_name\": \"Placeat rerum commodi.\",\n      \"phone\": \"Facilis corrupti eos consectetur repellat.\"\n   }'")
		}
		if body.Address == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))

		if err != nil {
			return nil, err
		}
	}
	v := &catalog.CreateCustomerDTO{
		FirstName: body.FirstName,
		LastName:  body.LastName,
		Email:     body.Email,
		Document:  body.Document,
		Phone:     body.Phone,
	}
	if body.Address != nil {
		v.Address = marshalAddressDTORequestBodyToCatalogAddressDTO(body.Address)
	}

	return v, nil
}

// BuildCreateCountryPayload builds the payload for the catalog create_country
// endpoint from CLI flags.
func BuildCreateCountryPayload(catalogCreateCountryBody string) (*catalog.CreateCountryDTO, error) {
	var err error
	var body CreateCountryRequestBody
	{
		err = json.Unmarshal([]byte(catalogCreateCountryBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Dolorem soluta fugiat deleniti nobis quam.\"\n   }'")
		}
	}
	v := &catalog.CreateCountryDTO{
		Name: body.Name,
	}

	return v, nil
}

// BuildCreateStatePayload builds the payload for the catalog create_state
// endpoint from CLI flags.
func BuildCreateStatePayload(catalogCreateStateBody string) (*catalog.CreateStateDTO, error) {
	var err error
	var body CreateStateRequestBody
	{
		err = json.Unmarshal([]byte(catalogCreateStateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"country_id\": \"Libero consequatur eveniet expedita dolore quod.\",\n      \"name\": \"Molestiae aut ut.\"\n   }'")
		}
	}
	v := &catalog.CreateStateDTO{
		Name:      body.Name,
		CountryID: body.CountryID,
	}

	return v, nil
}
