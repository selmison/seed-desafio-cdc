// Code generated by goa v3.2.4, DO NOT EDIT.
//
// catalog HTTP client CLI support package
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	catalog "github.com/selmison/seed-desafio-cdc/gen/catalog"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateActorPayload builds the payload for the catalog create_actor
// endpoint from CLI flags.
func BuildCreateActorPayload(catalogCreateActorBody string) (*catalog.CreateActorDTO, error) {
	var err error
	var body CreateActorRequestBody
	{
		err = json.Unmarshal([]byte(catalogCreateActorBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"hyv\",\n      \"email\": \"alexa.raynor@balistreri.biz\",\n      \"name\": \"Beatae adipisci perferendis tenetur.\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))

		if utf8.RuneCountInString(body.Description) > 400 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", body.Description, utf8.RuneCountInString(body.Description), 400, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &catalog.CreateActorDTO{
		Name:        body.Name,
		Email:       body.Email,
		Description: body.Description,
	}

	return v, nil
}

// BuildShowActorPayload builds the payload for the catalog show_actor endpoint
// from CLI flags.
func BuildShowActorPayload(catalogShowActorID string) (*catalog.ShowByIDDTO, error) {
	var id string
	{
		id = catalogShowActorID
	}
	v := &catalog.ShowByIDDTO{}
	v.ID = id

	return v, nil
}

// BuildCreateBookPayload builds the payload for the catalog create_book
// endpoint from CLI flags.
func BuildCreateBookPayload(catalogCreateBookBody string) (*catalog.CreateBookDTO, error) {
	var err error
	var body CreateBookRequestBody
	{
		err = json.Unmarshal([]byte(catalogCreateBookBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"actor_ids\": [\n         \"A dolores quod nisi qui.\",\n         \"Iste qui aspernatur velit.\",\n         \"Voluptatem dolores dolor officia.\",\n         \"Error autem harum facilis debitis velit.\"\n      ],\n      \"category_ids\": [\n         \"Est soluta voluptatem et.\",\n         \"Ipsa commodi corporis excepturi expedita.\",\n         \"Ab mollitia ut porro.\",\n         \"Explicabo sit error eum.\"\n      ],\n      \"isbn\": \"Quis repellat.\",\n      \"issue\": \"Fugit ut praesentium.\",\n      \"pages\": 6398089048527974538,\n      \"price\": 20.722057,\n      \"summary\": \"Delectus fugiat distinctio iusto corporis eum amet.\",\n      \"synopsis\": \"l4a\",\n      \"title\": \"Harum nam sit ut quae perferendis adipisci.\"\n   }'")
		}
		if body.CategoryIds == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("category_ids", "body"))
		}
		if body.ActorIds == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("actor_ids", "body"))
		}
		if utf8.RuneCountInString(body.Synopsis) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.synopsis", body.Synopsis, utf8.RuneCountInString(body.Synopsis), 500, false))
		}
		if body.Price < 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", body.Price, 20, true))
		}
		if body.Pages < 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.pages", body.Pages, 100, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &catalog.CreateBookDTO{
		Title:    body.Title,
		Synopsis: body.Synopsis,
		Summary:  body.Summary,
		Price:    body.Price,
		Pages:    body.Pages,
		Isbn:     body.Isbn,
		Issue:    body.Issue,
	}
	if body.CategoryIds != nil {
		v.CategoryIds = make([]string, len(body.CategoryIds))
		for i, val := range body.CategoryIds {
			v.CategoryIds[i] = val
		}
	}
	if body.ActorIds != nil {
		v.ActorIds = make([]string, len(body.ActorIds))
		for i, val := range body.ActorIds {
			v.ActorIds[i] = val
		}
	}

	return v, nil
}

// BuildShowBookPayload builds the payload for the catalog show_book endpoint
// from CLI flags.
func BuildShowBookPayload(catalogShowBookID string) (*catalog.ShowByIDDTO, error) {
	var id string
	{
		id = catalogShowBookID
	}
	v := &catalog.ShowByIDDTO{}
	v.ID = id

	return v, nil
}

// BuildCreateCartPayload builds the payload for the catalog create_cart
// endpoint from CLI flags.
func BuildCreateCartPayload(catalogCreateCartBody string) (*catalog.CreateCartDTO, error) {
	var err error
	var body CreateCartRequestBody
	{
		err = json.Unmarshal([]byte(catalogCreateCartBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"coupon_id\": \"Sit et est atque dolor.\",\n      \"customer_id\": \"Occaecati animi iste et vitae et.\",\n      \"items\": [\n         {\n            \"amount\": 1023729152,\n            \"book_id\": \"Harum enim vero.\"\n         },\n         {\n            \"amount\": 1023729152,\n            \"book_id\": \"Harum enim vero.\"\n         },\n         {\n            \"amount\": 1023729152,\n            \"book_id\": \"Harum enim vero.\"\n         }\n      ],\n      \"total\": 0.22209309\n   }'")
		}
		if body.Items == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
		}
		if len(body.Items) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.items", body.Items, len(body.Items), 1, true))
		}
		for _, e := range body.Items {
			if e != nil {
				if err2 := ValidateItemDTORequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &catalog.CreateCartDTO{
		Total:      body.Total,
		CustomerID: body.CustomerID,
		CouponID:   body.CouponID,
	}
	if body.Items != nil {
		v.Items = make([]*catalog.ItemDTO, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = marshalItemDTORequestBodyToCatalogItemDTO(val)
		}
	}

	return v, nil
}

// BuildCreateCategoryPayload builds the payload for the catalog
// create_category endpoint from CLI flags.
func BuildCreateCategoryPayload(catalogCreateCategoryBody string) (*catalog.CreateCategoryDTO, error) {
	var err error
	var body CreateCategoryRequestBody
	{
		err = json.Unmarshal([]byte(catalogCreateCategoryBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Dolorem consequatur.\"\n   }'")
		}
	}
	v := &catalog.CreateCategoryDTO{
		Name: body.Name,
	}

	return v, nil
}

// BuildShowCategoryPayload builds the payload for the catalog show_category
// endpoint from CLI flags.
func BuildShowCategoryPayload(catalogShowCategoryID string) (*catalog.ShowByIDDTO, error) {
	var id string
	{
		id = catalogShowCategoryID
	}
	v := &catalog.ShowByIDDTO{}
	v.ID = id

	return v, nil
}

// BuildCreateCountryPayload builds the payload for the catalog create_country
// endpoint from CLI flags.
func BuildCreateCountryPayload(catalogCreateCountryBody string) (*catalog.CreateCountryDTO, error) {
	var err error
	var body CreateCountryRequestBody
	{
		err = json.Unmarshal([]byte(catalogCreateCountryBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Soluta libero consequatur eveniet expedita.\"\n   }'")
		}
	}
	v := &catalog.CreateCountryDTO{
		Name: body.Name,
	}

	return v, nil
}

// BuildShowCountryPayload builds the payload for the catalog show_country
// endpoint from CLI flags.
func BuildShowCountryPayload(catalogShowCountryID string) (*catalog.ShowByIDDTO, error) {
	var id string
	{
		id = catalogShowCountryID
	}
	v := &catalog.ShowByIDDTO{}
	v.ID = id

	return v, nil
}

// BuildApplyCouponPayload builds the payload for the catalog apply_coupon
// endpoint from CLI flags.
func BuildApplyCouponPayload(catalogApplyCouponBody string) (*catalog.ApplyCouponDTO, error) {
	var err error
	var body ApplyCouponRequestBody
	{
		err = json.Unmarshal([]byte(catalogApplyCouponBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"code\": \"Nobis reprehenderit.\",\n      \"purchase_id\": \"Quos aut aliquid.\"\n   }'")
		}
	}
	v := &catalog.ApplyCouponDTO{
		Code:       body.Code,
		PurchaseID: body.PurchaseID,
	}

	return v, nil
}

// BuildCreateCouponPayload builds the payload for the catalog create_coupon
// endpoint from CLI flags.
func BuildCreateCouponPayload(catalogCreateCouponBody string) (*catalog.CreateCouponDTO, error) {
	var err error
	var body CreateCouponRequestBody
	{
		err = json.Unmarshal([]byte(catalogCreateCouponBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"code\": \"Itaque necessitatibus voluptatem.\",\n      \"discount\": 0.3136458,\n      \"validity\": \"Eum et natus.\"\n   }'")
		}
		if body.Discount < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.discount", body.Discount, 0, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &catalog.CreateCouponDTO{
		Code:     body.Code,
		Discount: body.Discount,
		Validity: body.Validity,
	}

	return v, nil
}

// BuildCreateCustomerPayload builds the payload for the catalog
// create_customer endpoint from CLI flags.
func BuildCreateCustomerPayload(catalogCreateCustomerBody string) (*catalog.CreateCustomerDTO, error) {
	var err error
	var body CreateCustomerRequestBody
	{
		err = json.Unmarshal([]byte(catalogCreateCustomerBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"address\": {\n         \"address\": \"Neque sint qui.\",\n         \"cep\": \"Delectus quaerat fugiat facilis.\",\n         \"city\": \"Nostrum qui dolor aspernatur iure.\",\n         \"complement\": \"Qui corporis.\",\n         \"state_id\": \"Voluptatem nostrum.\"\n      },\n      \"cart_ids\": [\n         \"Quos magni.\",\n         \"Hic mollitia dolorem iusto dignissimos eaque.\",\n         \"Alias numquam facere eaque quam.\",\n         \"Nulla soluta.\"\n      ],\n      \"document\": \"Eaque laboriosam qui ea eius.\",\n      \"email\": \"lupe_balistreri@lemkevolkman.net\",\n      \"first_name\": \"Sit asperiores et inventore asperiores doloribus commodi.\",\n      \"last_name\": \"Ad veniam natus eaque recusandae.\",\n      \"phone\": \"Enim quo officiis.\"\n   }'")
		}
		if body.Address == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))

		if err != nil {
			return nil, err
		}
	}
	v := &catalog.CreateCustomerDTO{
		FirstName: body.FirstName,
		LastName:  body.LastName,
		Email:     body.Email,
		Document:  body.Document,
		Phone:     body.Phone,
	}
	if body.Address != nil {
		v.Address = marshalAddressDTORequestBodyToCatalogAddressDTO(body.Address)
	}
	if body.CartIds != nil {
		v.CartIds = make([]string, len(body.CartIds))
		for i, val := range body.CartIds {
			v.CartIds[i] = val
		}
	}

	return v, nil
}

// BuildCreatePurchasePayload builds the payload for the catalog
// create_purchase endpoint from CLI flags.
func BuildCreatePurchasePayload(catalogCreatePurchaseBody string) (*catalog.CreatePurchaseDTO, error) {
	var err error
	var body CreatePurchaseRequestBody
	{
		err = json.Unmarshal([]byte(catalogCreatePurchaseBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"cart\": {\n         \"coupon_id\": \"Aliquid nisi.\",\n         \"customer_id\": \"Hic modi cumque et libero quae ipsam.\",\n         \"items\": [\n            {\n               \"amount\": 1023729152,\n               \"book_id\": \"Harum enim vero.\"\n            }\n         ],\n         \"total\": 0.11953648\n      },\n      \"customer\": {\n         \"address\": {\n            \"address\": \"Neque sint qui.\",\n            \"cep\": \"Delectus quaerat fugiat facilis.\",\n            \"city\": \"Nostrum qui dolor aspernatur iure.\",\n            \"complement\": \"Qui corporis.\",\n            \"state_id\": \"Voluptatem nostrum.\"\n         },\n         \"cart_ids\": [\n            \"Et voluptas eveniet.\",\n            \"Fugiat voluptatem est qui.\",\n            \"Molestias facilis ipsam autem hic sit.\",\n            \"Explicabo fuga exercitationem.\"\n         ],\n         \"document\": \"Dolorum alias nostrum vero odio et.\",\n         \"email\": \"flavie@mante.net\",\n         \"first_name\": \"Vel eos provident optio error et qui.\",\n         \"last_name\": \"Nihil sequi.\",\n         \"phone\": \"Et magni consectetur maiores.\"\n      }\n   }'")
		}
		if body.Customer == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("customer", "body"))
		}
		if body.Cart == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("cart", "body"))
		}
		if body.Customer != nil {
			if err2 := ValidateCreateCustomerDTORequestBody(body.Customer); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if body.Cart != nil {
			if err2 := ValidateCreateCartDTORequestBody(body.Cart); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &catalog.CreatePurchaseDTO{}
	if body.Customer != nil {
		v.Customer = marshalCreateCustomerDTORequestBodyToCatalogCreateCustomerDTO(body.Customer)
	}
	if body.Cart != nil {
		v.Cart = marshalCreateCartDTORequestBodyToCatalogCreateCartDTO(body.Cart)
	}

	return v, nil
}

// BuildShowPurchasePayload builds the payload for the catalog show_purchase
// endpoint from CLI flags.
func BuildShowPurchasePayload(catalogShowPurchaseID string) (*catalog.ShowByIDDTO, error) {
	var id string
	{
		id = catalogShowPurchaseID
	}
	v := &catalog.ShowByIDDTO{}
	v.ID = id

	return v, nil
}

// BuildCreateStatePayload builds the payload for the catalog create_state
// endpoint from CLI flags.
func BuildCreateStatePayload(catalogCreateStateBody string) (*catalog.CreateStateDTO, error) {
	var err error
	var body CreateStateRequestBody
	{
		err = json.Unmarshal([]byte(catalogCreateStateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"country_id\": \"Tenetur cupiditate est dolores occaecati.\",\n      \"name\": \"Ducimus quidem quia non sed.\"\n   }'")
		}
	}
	v := &catalog.CreateStateDTO{
		Name:      body.Name,
		CountryID: body.CountryID,
	}

	return v, nil
}

// BuildShowStatePayload builds the payload for the catalog show_state endpoint
// from CLI flags.
func BuildShowStatePayload(catalogShowStateID string) (*catalog.ShowByIDDTO, error) {
	var id string
	{
		id = catalogShowStateID
	}
	v := &catalog.ShowByIDDTO{}
	v.ID = id

	return v, nil
}
