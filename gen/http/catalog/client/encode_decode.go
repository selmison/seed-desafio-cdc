// Code generated by goa v3.2.4, DO NOT EDIT.
//
// catalog HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	catalog "github.com/selmison/seed-desafio-cdc/gen/catalog"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateActorRequest instantiates a HTTP request object with method and
// path set to call the "catalog" service "create_actor" endpoint
func (c *Client) BuildCreateActorRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateActorCatalogPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("catalog", "create_actor", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateActorRequest returns an encoder for requests sent to the catalog
// create_actor server.
func EncodeCreateActorRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*catalog.CreateActorDTO)
		if !ok {
			return goahttp.ErrInvalidType("catalog", "create_actor", "*catalog.CreateActorDTO", v)
		}
		body := NewCreateActorRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("catalog", "create_actor", err)
		}
		return nil
	}
}

// DecodeCreateActorResponse returns a decoder for responses returned by the
// catalog create_actor endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateActorResponse may return the following errors:
//	- "invalid_fields" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeCreateActorResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateActorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "create_actor", err)
			}
			err = ValidateCreateActorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "create_actor", err)
			}
			res := NewCreateActorActorDTOCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateActorInvalidFieldsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "create_actor", err)
			}
			err = ValidateCreateActorInvalidFieldsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "create_actor", err)
			}
			return nil, NewCreateActorInvalidFields(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("catalog", "create_actor", resp.StatusCode, string(body))
		}
	}
}

// BuildShowActorRequest instantiates a HTTP request object with method and
// path set to call the "catalog" service "show_actor" endpoint
func (c *Client) BuildShowActorRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*catalog.ShowByIDDTO)
		if !ok {
			return nil, goahttp.ErrInvalidType("catalog", "show_actor", "*catalog.ShowByIDDTO", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowActorCatalogPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("catalog", "show_actor", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeShowActorResponse returns a decoder for responses returned by the
// catalog show_actor endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeShowActorResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeShowActorResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowActorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "show_actor", err)
			}
			err = ValidateShowActorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "show_actor", err)
			}
			res := NewShowActorActorDTOOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowActorNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "show_actor", err)
			}
			err = ValidateShowActorNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "show_actor", err)
			}
			return nil, NewShowActorNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("catalog", "show_actor", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateBookRequest instantiates a HTTP request object with method and
// path set to call the "catalog" service "create_book" endpoint
func (c *Client) BuildCreateBookRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateBookCatalogPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("catalog", "create_book", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateBookRequest returns an encoder for requests sent to the catalog
// create_book server.
func EncodeCreateBookRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*catalog.CreateBookDTO)
		if !ok {
			return goahttp.ErrInvalidType("catalog", "create_book", "*catalog.CreateBookDTO", v)
		}
		body := NewCreateBookRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("catalog", "create_book", err)
		}
		return nil
	}
}

// DecodeCreateBookResponse returns a decoder for responses returned by the
// catalog create_book endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateBookResponse may return the following errors:
//	- "invalid_fields" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeCreateBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateBookResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "create_book", err)
			}
			err = ValidateCreateBookResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "create_book", err)
			}
			res := NewCreateBookBookDTOCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateBookInvalidFieldsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "create_book", err)
			}
			err = ValidateCreateBookInvalidFieldsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "create_book", err)
			}
			return nil, NewCreateBookInvalidFields(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("catalog", "create_book", resp.StatusCode, string(body))
		}
	}
}

// BuildListBooksRequest instantiates a HTTP request object with method and
// path set to call the "catalog" service "list_books" endpoint
func (c *Client) BuildListBooksRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListBooksCatalogPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("catalog", "list_books", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListBooksResponse returns a decoder for responses returned by the
// catalog list_books endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListBooksResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListBooksResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "list_books", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateBookDTOResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "list_books", err)
			}
			res := NewListBooksBookDTOOK(body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("catalog", "list_books", resp.StatusCode, string(body))
		}
	}
}

// BuildShowBookRequest instantiates a HTTP request object with method and path
// set to call the "catalog" service "show_book" endpoint
func (c *Client) BuildShowBookRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*catalog.ShowByIDDTO)
		if !ok {
			return nil, goahttp.ErrInvalidType("catalog", "show_book", "*catalog.ShowByIDDTO", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowBookCatalogPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("catalog", "show_book", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeShowBookResponse returns a decoder for responses returned by the
// catalog show_book endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeShowBookResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeShowBookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowBookResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "show_book", err)
			}
			err = ValidateShowBookResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "show_book", err)
			}
			res := NewShowBookBookDTOOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowBookNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "show_book", err)
			}
			err = ValidateShowBookNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "show_book", err)
			}
			return nil, NewShowBookNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("catalog", "show_book", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateCartRequest instantiates a HTTP request object with method and
// path set to call the "catalog" service "create_cart" endpoint
func (c *Client) BuildCreateCartRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCartCatalogPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("catalog", "create_cart", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCartRequest returns an encoder for requests sent to the catalog
// create_cart server.
func EncodeCreateCartRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*catalog.CreateCartDTO)
		if !ok {
			return goahttp.ErrInvalidType("catalog", "create_cart", "*catalog.CreateCartDTO", v)
		}
		body := NewCreateCartRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("catalog", "create_cart", err)
		}
		return nil
	}
}

// DecodeCreateCartResponse returns a decoder for responses returned by the
// catalog create_cart endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateCartResponse may return the following errors:
//	- "invalid_fields" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeCreateCartResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateCartResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "create_cart", err)
			}
			err = ValidateCreateCartResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "create_cart", err)
			}
			res := NewCreateCartCartDTOCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateCartInvalidFieldsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "create_cart", err)
			}
			err = ValidateCreateCartInvalidFieldsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "create_cart", err)
			}
			return nil, NewCreateCartInvalidFields(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("catalog", "create_cart", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateCategoryRequest instantiates a HTTP request object with method
// and path set to call the "catalog" service "create_category" endpoint
func (c *Client) BuildCreateCategoryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCategoryCatalogPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("catalog", "create_category", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCategoryRequest returns an encoder for requests sent to the
// catalog create_category server.
func EncodeCreateCategoryRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*catalog.CreateCategoryDTO)
		if !ok {
			return goahttp.ErrInvalidType("catalog", "create_category", "*catalog.CreateCategoryDTO", v)
		}
		body := NewCreateCategoryRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("catalog", "create_category", err)
		}
		return nil
	}
}

// DecodeCreateCategoryResponse returns a decoder for responses returned by the
// catalog create_category endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateCategoryResponse may return the following errors:
//	- "invalid_fields" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeCreateCategoryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateCategoryResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "create_category", err)
			}
			err = ValidateCreateCategoryResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "create_category", err)
			}
			res := NewCreateCategoryCategoryDTOCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateCategoryInvalidFieldsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "create_category", err)
			}
			err = ValidateCreateCategoryInvalidFieldsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "create_category", err)
			}
			return nil, NewCreateCategoryInvalidFields(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("catalog", "create_category", resp.StatusCode, string(body))
		}
	}
}

// BuildShowCategoryRequest instantiates a HTTP request object with method and
// path set to call the "catalog" service "show_category" endpoint
func (c *Client) BuildShowCategoryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*catalog.ShowByIDDTO)
		if !ok {
			return nil, goahttp.ErrInvalidType("catalog", "show_category", "*catalog.ShowByIDDTO", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowCategoryCatalogPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("catalog", "show_category", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeShowCategoryResponse returns a decoder for responses returned by the
// catalog show_category endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeShowCategoryResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeShowCategoryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowCategoryResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "show_category", err)
			}
			err = ValidateShowCategoryResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "show_category", err)
			}
			res := NewShowCategoryCategoryDTOOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowCategoryNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "show_category", err)
			}
			err = ValidateShowCategoryNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "show_category", err)
			}
			return nil, NewShowCategoryNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("catalog", "show_category", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateCountryRequest instantiates a HTTP request object with method and
// path set to call the "catalog" service "create_country" endpoint
func (c *Client) BuildCreateCountryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCountryCatalogPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("catalog", "create_country", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCountryRequest returns an encoder for requests sent to the
// catalog create_country server.
func EncodeCreateCountryRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*catalog.CreateCountryDTO)
		if !ok {
			return goahttp.ErrInvalidType("catalog", "create_country", "*catalog.CreateCountryDTO", v)
		}
		body := NewCreateCountryRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("catalog", "create_country", err)
		}
		return nil
	}
}

// DecodeCreateCountryResponse returns a decoder for responses returned by the
// catalog create_country endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateCountryResponse may return the following errors:
//	- "invalid_fields" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeCreateCountryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateCountryResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "create_country", err)
			}
			err = ValidateCreateCountryResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "create_country", err)
			}
			res := NewCreateCountryCountryDTOCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateCountryInvalidFieldsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "create_country", err)
			}
			err = ValidateCreateCountryInvalidFieldsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "create_country", err)
			}
			return nil, NewCreateCountryInvalidFields(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("catalog", "create_country", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateCouponRequest instantiates a HTTP request object with method and
// path set to call the "catalog" service "create_coupon" endpoint
func (c *Client) BuildCreateCouponRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCouponCatalogPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("catalog", "create_coupon", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCouponRequest returns an encoder for requests sent to the
// catalog create_coupon server.
func EncodeCreateCouponRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*catalog.CreateCouponDTO)
		if !ok {
			return goahttp.ErrInvalidType("catalog", "create_coupon", "*catalog.CreateCouponDTO", v)
		}
		body := NewCreateCouponRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("catalog", "create_coupon", err)
		}
		return nil
	}
}

// DecodeCreateCouponResponse returns a decoder for responses returned by the
// catalog create_coupon endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateCouponResponse may return the following errors:
//	- "invalid_fields" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeCreateCouponResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateCouponResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "create_coupon", err)
			}
			err = ValidateCreateCouponResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "create_coupon", err)
			}
			res := NewCreateCouponCouponDTOCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateCouponInvalidFieldsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "create_coupon", err)
			}
			err = ValidateCreateCouponInvalidFieldsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "create_coupon", err)
			}
			return nil, NewCreateCouponInvalidFields(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("catalog", "create_coupon", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateCustomerRequest instantiates a HTTP request object with method
// and path set to call the "catalog" service "create_customer" endpoint
func (c *Client) BuildCreateCustomerRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCustomerCatalogPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("catalog", "create_customer", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCustomerRequest returns an encoder for requests sent to the
// catalog create_customer server.
func EncodeCreateCustomerRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*catalog.CreateCustomerDTO)
		if !ok {
			return goahttp.ErrInvalidType("catalog", "create_customer", "*catalog.CreateCustomerDTO", v)
		}
		body := NewCreateCustomerRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("catalog", "create_customer", err)
		}
		return nil
	}
}

// DecodeCreateCustomerResponse returns a decoder for responses returned by the
// catalog create_customer endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateCustomerResponse may return the following errors:
//	- "invalid_fields" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeCreateCustomerResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateCustomerResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "create_customer", err)
			}
			err = ValidateCreateCustomerResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "create_customer", err)
			}
			res := NewCreateCustomerCustomerDTOCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateCustomerInvalidFieldsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "create_customer", err)
			}
			err = ValidateCreateCustomerInvalidFieldsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "create_customer", err)
			}
			return nil, NewCreateCustomerInvalidFields(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("catalog", "create_customer", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateStateRequest instantiates a HTTP request object with method and
// path set to call the "catalog" service "create_state" endpoint
func (c *Client) BuildCreateStateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateStateCatalogPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("catalog", "create_state", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateStateRequest returns an encoder for requests sent to the catalog
// create_state server.
func EncodeCreateStateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*catalog.CreateStateDTO)
		if !ok {
			return goahttp.ErrInvalidType("catalog", "create_state", "*catalog.CreateStateDTO", v)
		}
		body := NewCreateStateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("catalog", "create_state", err)
		}
		return nil
	}
}

// DecodeCreateStateResponse returns a decoder for responses returned by the
// catalog create_state endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateStateResponse may return the following errors:
//	- "invalid_fields" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeCreateStateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateStateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "create_state", err)
			}
			err = ValidateCreateStateResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "create_state", err)
			}
			res := NewCreateStateStateDTOCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateStateInvalidFieldsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("catalog", "create_state", err)
			}
			err = ValidateCreateStateInvalidFieldsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("catalog", "create_state", err)
			}
			return nil, NewCreateStateInvalidFields(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("catalog", "create_state", resp.StatusCode, string(body))
		}
	}
}

// unmarshalBookDTOResponseToCatalogBookDTO builds a value of type
// *catalog.BookDTO from a value of type *BookDTOResponse.
func unmarshalBookDTOResponseToCatalogBookDTO(v *BookDTOResponse) *catalog.BookDTO {
	res := &catalog.BookDTO{
		ID:       *v.ID,
		Title:    *v.Title,
		Synopsis: *v.Synopsis,
		Summary:  v.Summary,
		Price:    *v.Price,
		Pages:    *v.Pages,
		Isbn:     *v.Isbn,
		Issue:    *v.Issue,
	}
	res.CategoryIds = make([]string, len(v.CategoryIds))
	for i, val := range v.CategoryIds {
		res.CategoryIds[i] = val
	}
	res.ActorIds = make([]string, len(v.ActorIds))
	for i, val := range v.ActorIds {
		res.ActorIds[i] = val
	}

	return res
}

// marshalCatalogItemDTOToItemDTORequestBody builds a value of type
// *ItemDTORequestBody from a value of type *catalog.ItemDTO.
func marshalCatalogItemDTOToItemDTORequestBody(v *catalog.ItemDTO) *ItemDTORequestBody {
	res := &ItemDTORequestBody{
		BookID: v.BookID,
		Amount: v.Amount,
	}

	return res
}

// marshalItemDTORequestBodyToCatalogItemDTO builds a value of type
// *catalog.ItemDTO from a value of type *ItemDTORequestBody.
func marshalItemDTORequestBodyToCatalogItemDTO(v *ItemDTORequestBody) *catalog.ItemDTO {
	res := &catalog.ItemDTO{
		BookID: v.BookID,
		Amount: v.Amount,
	}

	return res
}

// unmarshalItemDTOResponseBodyToCatalogItemDTO builds a value of type
// *catalog.ItemDTO from a value of type *ItemDTOResponseBody.
func unmarshalItemDTOResponseBodyToCatalogItemDTO(v *ItemDTOResponseBody) *catalog.ItemDTO {
	res := &catalog.ItemDTO{
		BookID: *v.BookID,
		Amount: *v.Amount,
	}

	return res
}

// marshalCatalogAddressDTOToAddressDTORequestBody builds a value of type
// *AddressDTORequestBody from a value of type *catalog.AddressDTO.
func marshalCatalogAddressDTOToAddressDTORequestBody(v *catalog.AddressDTO) *AddressDTORequestBody {
	res := &AddressDTORequestBody{
		Address:    v.Address,
		Complement: v.Complement,
		City:       v.City,
		CountryID:  v.CountryID,
		StateID:    v.StateID,
		Cep:        v.Cep,
	}

	return res
}

// marshalAddressDTORequestBodyToCatalogAddressDTO builds a value of type
// *catalog.AddressDTO from a value of type *AddressDTORequestBody.
func marshalAddressDTORequestBodyToCatalogAddressDTO(v *AddressDTORequestBody) *catalog.AddressDTO {
	res := &catalog.AddressDTO{
		Address:    v.Address,
		Complement: v.Complement,
		City:       v.City,
		CountryID:  v.CountryID,
		StateID:    v.StateID,
		Cep:        v.Cep,
	}

	return res
}

// unmarshalAddressDTOResponseBodyToCatalogAddressDTO builds a value of type
// *catalog.AddressDTO from a value of type *AddressDTOResponseBody.
func unmarshalAddressDTOResponseBodyToCatalogAddressDTO(v *AddressDTOResponseBody) *catalog.AddressDTO {
	res := &catalog.AddressDTO{
		Address:    *v.Address,
		Complement: *v.Complement,
		City:       *v.City,
		CountryID:  *v.CountryID,
		StateID:    *v.StateID,
		Cep:        *v.Cep,
	}

	return res
}
