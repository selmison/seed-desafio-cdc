// Code generated by goa v3.2.4, DO NOT EDIT.
//
// catalog client HTTP transport
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package client

import (
	"context"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	goahttp "goa.design/goa/v3/http"
)

// Client lists the catalog service endpoint HTTP clients.
type Client struct {
	// CreateActor Doer is the HTTP client used to make requests to the
	// create_actor endpoint.
	CreateActorDoer goahttp.Doer

	// ListActors Doer is the HTTP client used to make requests to the list_actors
	// endpoint.
	ListActorsDoer goahttp.Doer

	// ShowActor Doer is the HTTP client used to make requests to the show_actor
	// endpoint.
	ShowActorDoer goahttp.Doer

	// CreateBook Doer is the HTTP client used to make requests to the create_book
	// endpoint.
	CreateBookDoer goahttp.Doer

	// ListBooks Doer is the HTTP client used to make requests to the list_books
	// endpoint.
	ListBooksDoer goahttp.Doer

	// ShowBook Doer is the HTTP client used to make requests to the show_book
	// endpoint.
	ShowBookDoer goahttp.Doer

	// CreateCart Doer is the HTTP client used to make requests to the create_cart
	// endpoint.
	CreateCartDoer goahttp.Doer

	// CreateCategory Doer is the HTTP client used to make requests to the
	// create_category endpoint.
	CreateCategoryDoer goahttp.Doer

	// ListCategories Doer is the HTTP client used to make requests to the
	// list_categories endpoint.
	ListCategoriesDoer goahttp.Doer

	// ShowCategory Doer is the HTTP client used to make requests to the
	// show_category endpoint.
	ShowCategoryDoer goahttp.Doer

	// CreateCountry Doer is the HTTP client used to make requests to the
	// create_country endpoint.
	CreateCountryDoer goahttp.Doer

	// ListCountries Doer is the HTTP client used to make requests to the
	// list_countries endpoint.
	ListCountriesDoer goahttp.Doer

	// ShowCountry Doer is the HTTP client used to make requests to the
	// show_country endpoint.
	ShowCountryDoer goahttp.Doer

	// ApplyCoupon Doer is the HTTP client used to make requests to the
	// apply_coupon endpoint.
	ApplyCouponDoer goahttp.Doer

	// CreateCoupon Doer is the HTTP client used to make requests to the
	// create_coupon endpoint.
	CreateCouponDoer goahttp.Doer

	// CreateCustomer Doer is the HTTP client used to make requests to the
	// create_customer endpoint.
	CreateCustomerDoer goahttp.Doer

	// CreatePurchase Doer is the HTTP client used to make requests to the
	// create_purchase endpoint.
	CreatePurchaseDoer goahttp.Doer

	// ShowPurchase Doer is the HTTP client used to make requests to the
	// show_purchase endpoint.
	ShowPurchaseDoer goahttp.Doer

	// CreateState Doer is the HTTP client used to make requests to the
	// create_state endpoint.
	CreateStateDoer goahttp.Doer

	// ListStates Doer is the HTTP client used to make requests to the list_states
	// endpoint.
	ListStatesDoer goahttp.Doer

	// ShowState Doer is the HTTP client used to make requests to the show_state
	// endpoint.
	ShowStateDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the catalog service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateActorDoer:     doer,
		ListActorsDoer:      doer,
		ShowActorDoer:       doer,
		CreateBookDoer:      doer,
		ListBooksDoer:       doer,
		ShowBookDoer:        doer,
		CreateCartDoer:      doer,
		CreateCategoryDoer:  doer,
		ListCategoriesDoer:  doer,
		ShowCategoryDoer:    doer,
		CreateCountryDoer:   doer,
		ListCountriesDoer:   doer,
		ShowCountryDoer:     doer,
		ApplyCouponDoer:     doer,
		CreateCouponDoer:    doer,
		CreateCustomerDoer:  doer,
		CreatePurchaseDoer:  doer,
		ShowPurchaseDoer:    doer,
		CreateStateDoer:     doer,
		ListStatesDoer:      doer,
		ShowStateDoer:       doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// CreateActor returns an endpoint that makes HTTP requests to the catalog
// service create_actor server.
func (c *Client) CreateActor() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeCreateActorRequest(c.encoder)
		decodeResponse = DecodeCreateActorResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateActorRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateActorDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "create_actor", err)
		}
		return decodeResponse(resp)
	}
}

// ListActors returns an endpoint that makes HTTP requests to the catalog
// service list_actors server.
func (c *Client) ListActors() endpoint.Endpoint {
	var (
		decodeResponse = DecodeListActorsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListActorsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListActorsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "list_actors", err)
		}
		return decodeResponse(resp)
	}
}

// ShowActor returns an endpoint that makes HTTP requests to the catalog
// service show_actor server.
func (c *Client) ShowActor() endpoint.Endpoint {
	var (
		decodeResponse = DecodeShowActorResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildShowActorRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ShowActorDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "show_actor", err)
		}
		return decodeResponse(resp)
	}
}

// CreateBook returns an endpoint that makes HTTP requests to the catalog
// service create_book server.
func (c *Client) CreateBook() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeCreateBookRequest(c.encoder)
		decodeResponse = DecodeCreateBookResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateBookRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateBookDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "create_book", err)
		}
		return decodeResponse(resp)
	}
}

// ListBooks returns an endpoint that makes HTTP requests to the catalog
// service list_books server.
func (c *Client) ListBooks() endpoint.Endpoint {
	var (
		decodeResponse = DecodeListBooksResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListBooksRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListBooksDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "list_books", err)
		}
		return decodeResponse(resp)
	}
}

// ShowBook returns an endpoint that makes HTTP requests to the catalog service
// show_book server.
func (c *Client) ShowBook() endpoint.Endpoint {
	var (
		decodeResponse = DecodeShowBookResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildShowBookRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ShowBookDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "show_book", err)
		}
		return decodeResponse(resp)
	}
}

// CreateCart returns an endpoint that makes HTTP requests to the catalog
// service create_cart server.
func (c *Client) CreateCart() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeCreateCartRequest(c.encoder)
		decodeResponse = DecodeCreateCartResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateCartRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCartDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "create_cart", err)
		}
		return decodeResponse(resp)
	}
}

// CreateCategory returns an endpoint that makes HTTP requests to the catalog
// service create_category server.
func (c *Client) CreateCategory() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeCreateCategoryRequest(c.encoder)
		decodeResponse = DecodeCreateCategoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateCategoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCategoryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "create_category", err)
		}
		return decodeResponse(resp)
	}
}

// ListCategories returns an endpoint that makes HTTP requests to the catalog
// service list_categories server.
func (c *Client) ListCategories() endpoint.Endpoint {
	var (
		decodeResponse = DecodeListCategoriesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListCategoriesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListCategoriesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "list_categories", err)
		}
		return decodeResponse(resp)
	}
}

// ShowCategory returns an endpoint that makes HTTP requests to the catalog
// service show_category server.
func (c *Client) ShowCategory() endpoint.Endpoint {
	var (
		decodeResponse = DecodeShowCategoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildShowCategoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ShowCategoryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "show_category", err)
		}
		return decodeResponse(resp)
	}
}

// CreateCountry returns an endpoint that makes HTTP requests to the catalog
// service create_country server.
func (c *Client) CreateCountry() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeCreateCountryRequest(c.encoder)
		decodeResponse = DecodeCreateCountryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateCountryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCountryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "create_country", err)
		}
		return decodeResponse(resp)
	}
}

// ListCountries returns an endpoint that makes HTTP requests to the catalog
// service list_countries server.
func (c *Client) ListCountries() endpoint.Endpoint {
	var (
		decodeResponse = DecodeListCountriesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListCountriesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListCountriesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "list_countries", err)
		}
		return decodeResponse(resp)
	}
}

// ShowCountry returns an endpoint that makes HTTP requests to the catalog
// service show_country server.
func (c *Client) ShowCountry() endpoint.Endpoint {
	var (
		decodeResponse = DecodeShowCountryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildShowCountryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ShowCountryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "show_country", err)
		}
		return decodeResponse(resp)
	}
}

// ApplyCoupon returns an endpoint that makes HTTP requests to the catalog
// service apply_coupon server.
func (c *Client) ApplyCoupon() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeApplyCouponRequest(c.encoder)
		decodeResponse = DecodeApplyCouponResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildApplyCouponRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ApplyCouponDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "apply_coupon", err)
		}
		return decodeResponse(resp)
	}
}

// CreateCoupon returns an endpoint that makes HTTP requests to the catalog
// service create_coupon server.
func (c *Client) CreateCoupon() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeCreateCouponRequest(c.encoder)
		decodeResponse = DecodeCreateCouponResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateCouponRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCouponDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "create_coupon", err)
		}
		return decodeResponse(resp)
	}
}

// CreateCustomer returns an endpoint that makes HTTP requests to the catalog
// service create_customer server.
func (c *Client) CreateCustomer() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeCreateCustomerRequest(c.encoder)
		decodeResponse = DecodeCreateCustomerResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateCustomerRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCustomerDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "create_customer", err)
		}
		return decodeResponse(resp)
	}
}

// CreatePurchase returns an endpoint that makes HTTP requests to the catalog
// service create_purchase server.
func (c *Client) CreatePurchase() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeCreatePurchaseRequest(c.encoder)
		decodeResponse = DecodeCreatePurchaseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreatePurchaseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreatePurchaseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "create_purchase", err)
		}
		return decodeResponse(resp)
	}
}

// ShowPurchase returns an endpoint that makes HTTP requests to the catalog
// service show_purchase server.
func (c *Client) ShowPurchase() endpoint.Endpoint {
	var (
		decodeResponse = DecodeShowPurchaseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildShowPurchaseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ShowPurchaseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "show_purchase", err)
		}
		return decodeResponse(resp)
	}
}

// CreateState returns an endpoint that makes HTTP requests to the catalog
// service create_state server.
func (c *Client) CreateState() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeCreateStateRequest(c.encoder)
		decodeResponse = DecodeCreateStateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateStateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateStateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "create_state", err)
		}
		return decodeResponse(resp)
	}
}

// ListStates returns an endpoint that makes HTTP requests to the catalog
// service list_states server.
func (c *Client) ListStates() endpoint.Endpoint {
	var (
		decodeResponse = DecodeListStatesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListStatesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListStatesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "list_states", err)
		}
		return decodeResponse(resp)
	}
}

// ShowState returns an endpoint that makes HTTP requests to the catalog
// service show_state server.
func (c *Client) ShowState() endpoint.Endpoint {
	var (
		decodeResponse = DecodeShowStateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildShowStateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ShowStateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("catalog", "show_state", err)
		}
		return decodeResponse(resp)
	}
}
