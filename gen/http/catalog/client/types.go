// Code generated by goa v3.2.4, DO NOT EDIT.
//
// catalog HTTP client types
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package client

import (
	"unicode/utf8"

	catalog "github.com/selmison/seed-desafio-cdc/gen/catalog"
	goa "goa.design/goa/v3/pkg"
)

// CreateActorRequestBody is the type of the "catalog" service "create_actor"
// endpoint HTTP request body.
type CreateActorRequestBody struct {
	Name        string `form:"name" json:"name" xml:"name"`
	Email       string `form:"email" json:"email" xml:"email"`
	Description string `form:"description" json:"description" xml:"description"`
}

// CreateBookRequestBody is the type of the "catalog" service "create_book"
// endpoint HTTP request body.
type CreateBookRequestBody struct {
	Title       string   `form:"title" json:"title" xml:"title"`
	Synopsis    string   `form:"synopsis" json:"synopsis" xml:"synopsis"`
	Summary     *string  `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	Price       float32  `form:"price" json:"price" xml:"price"`
	Pages       int      `form:"pages" json:"pages" xml:"pages"`
	Isbn        string   `form:"isbn" json:"isbn" xml:"isbn"`
	Issue       string   `form:"issue" json:"issue" xml:"issue"`
	CategoryIds []string `form:"category_ids" json:"category_ids" xml:"category_ids"`
	ActorIds    []string `form:"actor_ids" json:"actor_ids" xml:"actor_ids"`
}

// CreateCategoryRequestBody is the type of the "catalog" service
// "create_category" endpoint HTTP request body.
type CreateCategoryRequestBody struct {
	Name string `form:"name" json:"name" xml:"name"`
}

// CreateCountryRequestBody is the type of the "catalog" service
// "create_country" endpoint HTTP request body.
type CreateCountryRequestBody struct {
	Name string `form:"name" json:"name" xml:"name"`
}

// CreateStateRequestBody is the type of the "catalog" service "create_state"
// endpoint HTTP request body.
type CreateStateRequestBody struct {
	Name      string `form:"name" json:"name" xml:"name"`
	CountryID string `form:"country_id" json:"country_id" xml:"country_id"`
}

// CreateActorResponseBody is the type of the "catalog" service "create_actor"
// endpoint HTTP response body.
type CreateActorResponseBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Email       *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	CreatedAt   *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// ShowActorResponseBody is the type of the "catalog" service "show_actor"
// endpoint HTTP response body.
type ShowActorResponseBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Email       *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	CreatedAt   *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// CreateBookResponseBody is the type of the "catalog" service "create_book"
// endpoint HTTP response body.
type CreateBookResponseBody struct {
	ID          *string  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title       *string  `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Synopsis    *string  `form:"synopsis,omitempty" json:"synopsis,omitempty" xml:"synopsis,omitempty"`
	Summary     *string  `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	Price       *float32 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	Pages       *int     `form:"pages,omitempty" json:"pages,omitempty" xml:"pages,omitempty"`
	Isbn        *string  `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
	Issue       *string  `form:"issue,omitempty" json:"issue,omitempty" xml:"issue,omitempty"`
	CategoryIds []string `form:"category_ids,omitempty" json:"category_ids,omitempty" xml:"category_ids,omitempty"`
	ActorIds    []string `form:"actor_ids,omitempty" json:"actor_ids,omitempty" xml:"actor_ids,omitempty"`
}

// ListBooksResponseBody is the type of the "catalog" service "list_books"
// endpoint HTTP response body.
type ListBooksResponseBody []*BookDTOResponse

// ShowBookResponseBody is the type of the "catalog" service "show_book"
// endpoint HTTP response body.
type ShowBookResponseBody struct {
	ID          *string  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title       *string  `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Synopsis    *string  `form:"synopsis,omitempty" json:"synopsis,omitempty" xml:"synopsis,omitempty"`
	Summary     *string  `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	Price       *float32 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	Pages       *int     `form:"pages,omitempty" json:"pages,omitempty" xml:"pages,omitempty"`
	Isbn        *string  `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
	Issue       *string  `form:"issue,omitempty" json:"issue,omitempty" xml:"issue,omitempty"`
	CategoryIds []string `form:"category_ids,omitempty" json:"category_ids,omitempty" xml:"category_ids,omitempty"`
	ActorIds    []string `form:"actor_ids,omitempty" json:"actor_ids,omitempty" xml:"actor_ids,omitempty"`
}

// CreateCategoryResponseBody is the type of the "catalog" service
// "create_category" endpoint HTTP response body.
type CreateCategoryResponseBody struct {
	ID   *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// ShowCategoryResponseBody is the type of the "catalog" service
// "show_category" endpoint HTTP response body.
type ShowCategoryResponseBody struct {
	ID   *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// CreateCountryResponseBody is the type of the "catalog" service
// "create_country" endpoint HTTP response body.
type CreateCountryResponseBody struct {
	ID       *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	StateIds *string `form:"state_ids,omitempty" json:"state_ids,omitempty" xml:"state_ids,omitempty"`
}

// CreateStateResponseBody is the type of the "catalog" service "create_state"
// endpoint HTTP response body.
type CreateStateResponseBody struct {
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name      *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	CountryID *string `form:"country_id,omitempty" json:"country_id,omitempty" xml:"country_id,omitempty"`
}

// CreateActorInvalidFieldsResponseBody is the type of the "catalog" service
// "create_actor" endpoint HTTP response body for the "invalid_fields" error.
type CreateActorInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowActorNotFoundResponseBody is the type of the "catalog" service
// "show_actor" endpoint HTTP response body for the "not_found" error.
type ShowActorNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBookInvalidFieldsResponseBody is the type of the "catalog" service
// "create_book" endpoint HTTP response body for the "invalid_fields" error.
type CreateBookInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowBookNotFoundResponseBody is the type of the "catalog" service
// "show_book" endpoint HTTP response body for the "not_found" error.
type ShowBookNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateCategoryInvalidFieldsResponseBody is the type of the "catalog" service
// "create_category" endpoint HTTP response body for the "invalid_fields" error.
type CreateCategoryInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowCategoryNotFoundResponseBody is the type of the "catalog" service
// "show_category" endpoint HTTP response body for the "not_found" error.
type ShowCategoryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateCountryInvalidFieldsResponseBody is the type of the "catalog" service
// "create_country" endpoint HTTP response body for the "invalid_fields" error.
type CreateCountryInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateStateInvalidFieldsResponseBody is the type of the "catalog" service
// "create_state" endpoint HTTP response body for the "invalid_fields" error.
type CreateStateInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// BookDTOResponse is used to define fields on response body types.
type BookDTOResponse struct {
	ID          *string  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title       *string  `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Synopsis    *string  `form:"synopsis,omitempty" json:"synopsis,omitempty" xml:"synopsis,omitempty"`
	Summary     *string  `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	Price       *float32 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	Pages       *int     `form:"pages,omitempty" json:"pages,omitempty" xml:"pages,omitempty"`
	Isbn        *string  `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
	Issue       *string  `form:"issue,omitempty" json:"issue,omitempty" xml:"issue,omitempty"`
	CategoryIds []string `form:"category_ids,omitempty" json:"category_ids,omitempty" xml:"category_ids,omitempty"`
	ActorIds    []string `form:"actor_ids,omitempty" json:"actor_ids,omitempty" xml:"actor_ids,omitempty"`
}

// NewCreateActorRequestBody builds the HTTP request body from the payload of
// the "create_actor" endpoint of the "catalog" service.
func NewCreateActorRequestBody(p *catalog.CreateActorDTO) *CreateActorRequestBody {
	body := &CreateActorRequestBody{
		Name:        p.Name,
		Email:       p.Email,
		Description: p.Description,
	}
	return body
}

// NewCreateBookRequestBody builds the HTTP request body from the payload of
// the "create_book" endpoint of the "catalog" service.
func NewCreateBookRequestBody(p *catalog.CreateBookDTO) *CreateBookRequestBody {
	body := &CreateBookRequestBody{
		Title:    p.Title,
		Synopsis: p.Synopsis,
		Summary:  p.Summary,
		Price:    p.Price,
		Pages:    p.Pages,
		Isbn:     p.Isbn,
		Issue:    p.Issue,
	}
	if p.CategoryIds != nil {
		body.CategoryIds = make([]string, len(p.CategoryIds))
		for i, val := range p.CategoryIds {
			body.CategoryIds[i] = val
		}
	}
	if p.ActorIds != nil {
		body.ActorIds = make([]string, len(p.ActorIds))
		for i, val := range p.ActorIds {
			body.ActorIds[i] = val
		}
	}
	return body
}

// NewCreateCategoryRequestBody builds the HTTP request body from the payload
// of the "create_category" endpoint of the "catalog" service.
func NewCreateCategoryRequestBody(p *catalog.CreateCategoryDTO) *CreateCategoryRequestBody {
	body := &CreateCategoryRequestBody{
		Name: p.Name,
	}
	return body
}

// NewCreateCountryRequestBody builds the HTTP request body from the payload of
// the "create_country" endpoint of the "catalog" service.
func NewCreateCountryRequestBody(p *catalog.CreateCountryDTO) *CreateCountryRequestBody {
	body := &CreateCountryRequestBody{
		Name: p.Name,
	}
	return body
}

// NewCreateStateRequestBody builds the HTTP request body from the payload of
// the "create_state" endpoint of the "catalog" service.
func NewCreateStateRequestBody(p *catalog.CreateStateDTO) *CreateStateRequestBody {
	body := &CreateStateRequestBody{
		Name:      p.Name,
		CountryID: p.CountryID,
	}
	return body
}

// NewCreateActorActorDTOCreated builds a "catalog" service "create_actor"
// endpoint result from a HTTP "Created" response.
func NewCreateActorActorDTOCreated(body *CreateActorResponseBody) *catalog.ActorDTO {
	v := &catalog.ActorDTO{
		ID:          *body.ID,
		Name:        *body.Name,
		Email:       *body.Email,
		Description: *body.Description,
		CreatedAt:   *body.CreatedAt,
	}

	return v
}

// NewCreateActorInvalidFields builds a catalog service create_actor endpoint
// invalid_fields error.
func NewCreateActorInvalidFields(body *CreateActorInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowActorActorDTOOK builds a "catalog" service "show_actor" endpoint
// result from a HTTP "OK" response.
func NewShowActorActorDTOOK(body *ShowActorResponseBody) *catalog.ActorDTO {
	v := &catalog.ActorDTO{
		ID:          *body.ID,
		Name:        *body.Name,
		Email:       *body.Email,
		Description: *body.Description,
		CreatedAt:   *body.CreatedAt,
	}

	return v
}

// NewShowActorNotFound builds a catalog service show_actor endpoint not_found
// error.
func NewShowActorNotFound(body *ShowActorNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBookBookDTOCreated builds a "catalog" service "create_book"
// endpoint result from a HTTP "Created" response.
func NewCreateBookBookDTOCreated(body *CreateBookResponseBody) *catalog.BookDTO {
	v := &catalog.BookDTO{
		ID:       *body.ID,
		Title:    *body.Title,
		Synopsis: *body.Synopsis,
		Summary:  body.Summary,
		Price:    *body.Price,
		Pages:    *body.Pages,
		Isbn:     *body.Isbn,
		Issue:    *body.Issue,
	}
	v.CategoryIds = make([]string, len(body.CategoryIds))
	for i, val := range body.CategoryIds {
		v.CategoryIds[i] = val
	}
	v.ActorIds = make([]string, len(body.ActorIds))
	for i, val := range body.ActorIds {
		v.ActorIds[i] = val
	}

	return v
}

// NewCreateBookInvalidFields builds a catalog service create_book endpoint
// invalid_fields error.
func NewCreateBookInvalidFields(body *CreateBookInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListBooksBookDTOOK builds a "catalog" service "list_books" endpoint
// result from a HTTP "OK" response.
func NewListBooksBookDTOOK(body []*BookDTOResponse) []*catalog.BookDTO {
	v := make([]*catalog.BookDTO, len(body))
	for i, val := range body {
		v[i] = unmarshalBookDTOResponseToCatalogBookDTO(val)
	}
	return v
}

// NewShowBookBookDTOOK builds a "catalog" service "show_book" endpoint result
// from a HTTP "OK" response.
func NewShowBookBookDTOOK(body *ShowBookResponseBody) *catalog.BookDTO {
	v := &catalog.BookDTO{
		ID:       *body.ID,
		Title:    *body.Title,
		Synopsis: *body.Synopsis,
		Summary:  body.Summary,
		Price:    *body.Price,
		Pages:    *body.Pages,
		Isbn:     *body.Isbn,
		Issue:    *body.Issue,
	}
	v.CategoryIds = make([]string, len(body.CategoryIds))
	for i, val := range body.CategoryIds {
		v.CategoryIds[i] = val
	}
	v.ActorIds = make([]string, len(body.ActorIds))
	for i, val := range body.ActorIds {
		v.ActorIds[i] = val
	}

	return v
}

// NewShowBookNotFound builds a catalog service show_book endpoint not_found
// error.
func NewShowBookNotFound(body *ShowBookNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateCategoryCategoryDTOCreated builds a "catalog" service
// "create_category" endpoint result from a HTTP "Created" response.
func NewCreateCategoryCategoryDTOCreated(body *CreateCategoryResponseBody) *catalog.CategoryDTO {
	v := &catalog.CategoryDTO{
		ID:   *body.ID,
		Name: *body.Name,
	}

	return v
}

// NewCreateCategoryInvalidFields builds a catalog service create_category
// endpoint invalid_fields error.
func NewCreateCategoryInvalidFields(body *CreateCategoryInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewShowCategoryCategoryDTOOK builds a "catalog" service "show_category"
// endpoint result from a HTTP "OK" response.
func NewShowCategoryCategoryDTOOK(body *ShowCategoryResponseBody) *catalog.CategoryDTO {
	v := &catalog.CategoryDTO{
		ID:   *body.ID,
		Name: *body.Name,
	}

	return v
}

// NewShowCategoryNotFound builds a catalog service show_category endpoint
// not_found error.
func NewShowCategoryNotFound(body *ShowCategoryNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateCountryCountryDTOCreated builds a "catalog" service
// "create_country" endpoint result from a HTTP "Created" response.
func NewCreateCountryCountryDTOCreated(body *CreateCountryResponseBody) *catalog.CountryDTO {
	v := &catalog.CountryDTO{
		ID:       *body.ID,
		Name:     *body.Name,
		StateIds: body.StateIds,
	}

	return v
}

// NewCreateCountryInvalidFields builds a catalog service create_country
// endpoint invalid_fields error.
func NewCreateCountryInvalidFields(body *CreateCountryInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateStateStateDTOCreated builds a "catalog" service "create_state"
// endpoint result from a HTTP "Created" response.
func NewCreateStateStateDTOCreated(body *CreateStateResponseBody) *catalog.StateDTO {
	v := &catalog.StateDTO{
		ID:        *body.ID,
		Name:      *body.Name,
		CountryID: *body.CountryID,
	}

	return v
}

// NewCreateStateInvalidFields builds a catalog service create_state endpoint
// invalid_fields error.
func NewCreateStateInvalidFields(body *CreateStateInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateActorResponseBody runs the validations defined on
// create_actor_response_body
func ValidateCreateActorResponseBody(body *CreateActorResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 400 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 400, false))
		}
	}
	return
}

// ValidateShowActorResponseBody runs the validations defined on
// show_actor_response_body
func ValidateShowActorResponseBody(body *ShowActorResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 400 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 400, false))
		}
	}
	return
}

// ValidateCreateBookResponseBody runs the validations defined on
// create_book_response_body
func ValidateCreateBookResponseBody(body *CreateBookResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Synopsis == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("synopsis", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Pages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pages", "body"))
	}
	if body.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isbn", "body"))
	}
	if body.Issue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("issue", "body"))
	}
	if body.CategoryIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category_ids", "body"))
	}
	if body.ActorIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actor_ids", "body"))
	}
	if body.Synopsis != nil {
		if utf8.RuneCountInString(*body.Synopsis) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.synopsis", *body.Synopsis, utf8.RuneCountInString(*body.Synopsis), 500, false))
		}
	}
	if body.Price != nil {
		if *body.Price < 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 20, true))
		}
	}
	if body.Pages != nil {
		if *body.Pages < 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.pages", *body.Pages, 100, true))
		}
	}
	return
}

// ValidateShowBookResponseBody runs the validations defined on
// show_book_response_body
func ValidateShowBookResponseBody(body *ShowBookResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Synopsis == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("synopsis", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Pages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pages", "body"))
	}
	if body.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isbn", "body"))
	}
	if body.Issue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("issue", "body"))
	}
	if body.CategoryIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category_ids", "body"))
	}
	if body.ActorIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actor_ids", "body"))
	}
	if body.Synopsis != nil {
		if utf8.RuneCountInString(*body.Synopsis) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.synopsis", *body.Synopsis, utf8.RuneCountInString(*body.Synopsis), 500, false))
		}
	}
	if body.Price != nil {
		if *body.Price < 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 20, true))
		}
	}
	if body.Pages != nil {
		if *body.Pages < 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.pages", *body.Pages, 100, true))
		}
	}
	return
}

// ValidateCreateCategoryResponseBody runs the validations defined on
// create_category_response_body
func ValidateCreateCategoryResponseBody(body *CreateCategoryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateShowCategoryResponseBody runs the validations defined on
// show_category_response_body
func ValidateShowCategoryResponseBody(body *ShowCategoryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateCreateCountryResponseBody runs the validations defined on
// create_country_response_body
func ValidateCreateCountryResponseBody(body *CreateCountryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateCreateStateResponseBody runs the validations defined on
// create_state_response_body
func ValidateCreateStateResponseBody(body *CreateStateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.CountryID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("country_id", "body"))
	}
	return
}

// ValidateCreateActorInvalidFieldsResponseBody runs the validations defined on
// create_actor_invalid_fields_response_body
func ValidateCreateActorInvalidFieldsResponseBody(body *CreateActorInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowActorNotFoundResponseBody runs the validations defined on
// show_actor_not_found_response_body
func ValidateShowActorNotFoundResponseBody(body *ShowActorNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBookInvalidFieldsResponseBody runs the validations defined on
// create_book_invalid_fields_response_body
func ValidateCreateBookInvalidFieldsResponseBody(body *CreateBookInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowBookNotFoundResponseBody runs the validations defined on
// show_book_not_found_response_body
func ValidateShowBookNotFoundResponseBody(body *ShowBookNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateCategoryInvalidFieldsResponseBody runs the validations defined
// on create_category_invalid_fields_response_body
func ValidateCreateCategoryInvalidFieldsResponseBody(body *CreateCategoryInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowCategoryNotFoundResponseBody runs the validations defined on
// show_category_not_found_response_body
func ValidateShowCategoryNotFoundResponseBody(body *ShowCategoryNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateCountryInvalidFieldsResponseBody runs the validations defined
// on create_country_invalid_fields_response_body
func ValidateCreateCountryInvalidFieldsResponseBody(body *CreateCountryInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateStateInvalidFieldsResponseBody runs the validations defined on
// create_state_invalid_fields_response_body
func ValidateCreateStateInvalidFieldsResponseBody(body *CreateStateInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateBookDTOResponse runs the validations defined on BookDTOResponse
func ValidateBookDTOResponse(body *BookDTOResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Synopsis == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("synopsis", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Pages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pages", "body"))
	}
	if body.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isbn", "body"))
	}
	if body.Issue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("issue", "body"))
	}
	if body.CategoryIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category_ids", "body"))
	}
	if body.ActorIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actor_ids", "body"))
	}
	if body.Synopsis != nil {
		if utf8.RuneCountInString(*body.Synopsis) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.synopsis", *body.Synopsis, utf8.RuneCountInString(*body.Synopsis), 500, false))
		}
	}
	if body.Price != nil {
		if *body.Price < 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 20, true))
		}
	}
	if body.Pages != nil {
		if *body.Pages < 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.pages", *body.Pages, 100, true))
		}
	}
	return
}
