// Code generated by goa v3.2.4, DO NOT EDIT.
//
// catalog HTTP client types
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package client

import (
	"unicode/utf8"

	catalog "github.com/selmison/seed-desafio-cdc/gen/catalog"
	goa "goa.design/goa/v3/pkg"
)

// CreateActorRequestBody is the type of the "catalog" service "create_actor"
// endpoint HTTP request body.
type CreateActorRequestBody struct {
	Name        string `form:"name" json:"name" xml:"name"`
	Email       string `form:"email" json:"email" xml:"email"`
	Description string `form:"description" json:"description" xml:"description"`
}

// CreateBookRequestBody is the type of the "catalog" service "create_book"
// endpoint HTTP request body.
type CreateBookRequestBody struct {
	Title       string   `form:"title" json:"title" xml:"title"`
	Synopsis    string   `form:"synopsis" json:"synopsis" xml:"synopsis"`
	Summary     *string  `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	Price       float32  `form:"price" json:"price" xml:"price"`
	Pages       int      `form:"pages" json:"pages" xml:"pages"`
	Isbn        string   `form:"isbn" json:"isbn" xml:"isbn"`
	Issue       string   `form:"issue" json:"issue" xml:"issue"`
	CategoryIds []string `form:"category_ids" json:"category_ids" xml:"category_ids"`
	ActorIds    []string `form:"actor_ids" json:"actor_ids" xml:"actor_ids"`
}

// CreateCartRequestBody is the type of the "catalog" service "create_cart"
// endpoint HTTP request body.
type CreateCartRequestBody struct {
	Total      float32               `form:"total" json:"total" xml:"total"`
	Items      []*ItemDTORequestBody `form:"items" json:"items" xml:"items"`
	CustomerID *string               `form:"customer_id,omitempty" json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	CouponID   *string               `form:"coupon_id,omitempty" json:"coupon_id,omitempty" xml:"coupon_id,omitempty"`
}

// CreateCategoryRequestBody is the type of the "catalog" service
// "create_category" endpoint HTTP request body.
type CreateCategoryRequestBody struct {
	Name string `form:"name" json:"name" xml:"name"`
}

// CreateCountryRequestBody is the type of the "catalog" service
// "create_country" endpoint HTTP request body.
type CreateCountryRequestBody struct {
	Name string `form:"name" json:"name" xml:"name"`
}

// CreateCouponRequestBody is the type of the "catalog" service "create_coupon"
// endpoint HTTP request body.
type CreateCouponRequestBody struct {
	Code     string  `form:"code" json:"code" xml:"code"`
	Discount float32 `form:"discount" json:"discount" xml:"discount"`
	Validity string  `form:"validity" json:"validity" xml:"validity"`
}

// CreateCustomerRequestBody is the type of the "catalog" service
// "create_customer" endpoint HTTP request body.
type CreateCustomerRequestBody struct {
	FirstName string                 `form:"first_name" json:"first_name" xml:"first_name"`
	LastName  string                 `form:"last_name" json:"last_name" xml:"last_name"`
	Email     string                 `form:"email" json:"email" xml:"email"`
	Document  string                 `form:"document" json:"document" xml:"document"`
	Address   *AddressDTORequestBody `form:"address" json:"address" xml:"address"`
	Phone     string                 `form:"phone" json:"phone" xml:"phone"`
	CartIds   []string               `form:"cart_ids,omitempty" json:"cart_ids,omitempty" xml:"cart_ids,omitempty"`
}

// CreatePurchaseRequestBody is the type of the "catalog" service
// "create_purchase" endpoint HTTP request body.
type CreatePurchaseRequestBody struct {
	Customer *CreateCustomerDTORequestBody `form:"customer" json:"customer" xml:"customer"`
	Cart     *CreateCartDTORequestBody     `form:"cart" json:"cart" xml:"cart"`
}

// CreateStateRequestBody is the type of the "catalog" service "create_state"
// endpoint HTTP request body.
type CreateStateRequestBody struct {
	Name      string `form:"name" json:"name" xml:"name"`
	CountryID string `form:"country_id" json:"country_id" xml:"country_id"`
}

// CreateActorResponseBody is the type of the "catalog" service "create_actor"
// endpoint HTTP response body.
type CreateActorResponseBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Email       *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	CreatedAt   *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// ListActorsResponseBody is the type of the "catalog" service "list_actors"
// endpoint HTTP response body.
type ListActorsResponseBody []*ActorDTOResponse

// ShowActorResponseBody is the type of the "catalog" service "show_actor"
// endpoint HTTP response body.
type ShowActorResponseBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Email       *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	CreatedAt   *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// CreateBookResponseBody is the type of the "catalog" service "create_book"
// endpoint HTTP response body.
type CreateBookResponseBody struct {
	ID          *string  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title       *string  `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Synopsis    *string  `form:"synopsis,omitempty" json:"synopsis,omitempty" xml:"synopsis,omitempty"`
	Summary     *string  `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	Price       *float32 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	Pages       *int     `form:"pages,omitempty" json:"pages,omitempty" xml:"pages,omitempty"`
	Isbn        *string  `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
	Issue       *string  `form:"issue,omitempty" json:"issue,omitempty" xml:"issue,omitempty"`
	CategoryIds []string `form:"category_ids,omitempty" json:"category_ids,omitempty" xml:"category_ids,omitempty"`
	ActorIds    []string `form:"actor_ids,omitempty" json:"actor_ids,omitempty" xml:"actor_ids,omitempty"`
}

// ListBooksResponseBody is the type of the "catalog" service "list_books"
// endpoint HTTP response body.
type ListBooksResponseBody []*BookDTOResponse

// ShowBookResponseBody is the type of the "catalog" service "show_book"
// endpoint HTTP response body.
type ShowBookResponseBody struct {
	ID          *string  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title       *string  `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Synopsis    *string  `form:"synopsis,omitempty" json:"synopsis,omitempty" xml:"synopsis,omitempty"`
	Summary     *string  `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	Price       *float32 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	Pages       *int     `form:"pages,omitempty" json:"pages,omitempty" xml:"pages,omitempty"`
	Isbn        *string  `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
	Issue       *string  `form:"issue,omitempty" json:"issue,omitempty" xml:"issue,omitempty"`
	CategoryIds []string `form:"category_ids,omitempty" json:"category_ids,omitempty" xml:"category_ids,omitempty"`
	ActorIds    []string `form:"actor_ids,omitempty" json:"actor_ids,omitempty" xml:"actor_ids,omitempty"`
}

// CreateCartResponseBody is the type of the "catalog" service "create_cart"
// endpoint HTTP response body.
type CreateCartResponseBody struct {
	ID         *string                `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Total      *float32               `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	Items      []*ItemDTOResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	CustomerID *string                `form:"customer_id,omitempty" json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	CouponID   *string                `form:"coupon_id,omitempty" json:"coupon_id,omitempty" xml:"coupon_id,omitempty"`
}

// CreateCategoryResponseBody is the type of the "catalog" service
// "create_category" endpoint HTTP response body.
type CreateCategoryResponseBody struct {
	ID   *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// ListCategoriesResponseBody is the type of the "catalog" service
// "list_categories" endpoint HTTP response body.
type ListCategoriesResponseBody []*CategoryDTOResponse

// ShowCategoryResponseBody is the type of the "catalog" service
// "show_category" endpoint HTTP response body.
type ShowCategoryResponseBody struct {
	ID   *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// CreateCountryResponseBody is the type of the "catalog" service
// "create_country" endpoint HTTP response body.
type CreateCountryResponseBody struct {
	ID       *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	StateIds *string `form:"state_ids,omitempty" json:"state_ids,omitempty" xml:"state_ids,omitempty"`
}

// ListCountriesResponseBody is the type of the "catalog" service
// "list_countries" endpoint HTTP response body.
type ListCountriesResponseBody []*CountryDTOResponse

// ShowCountryResponseBody is the type of the "catalog" service "show_country"
// endpoint HTTP response body.
type ShowCountryResponseBody struct {
	ID       *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	StateIds *string `form:"state_ids,omitempty" json:"state_ids,omitempty" xml:"state_ids,omitempty"`
}

// CreateCouponResponseBody is the type of the "catalog" service
// "create_coupon" endpoint HTTP response body.
type CreateCouponResponseBody struct {
	ID       *string  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Code     *string  `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Discount *float32 `form:"discount,omitempty" json:"discount,omitempty" xml:"discount,omitempty"`
	Validity *string  `form:"validity,omitempty" json:"validity,omitempty" xml:"validity,omitempty"`
}

// CreateCustomerResponseBody is the type of the "catalog" service
// "create_customer" endpoint HTTP response body.
type CreateCustomerResponseBody struct {
	ID        *string                 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	FirstName *string                 `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	LastName  *string                 `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	Email     *string                 `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Document  *string                 `form:"document,omitempty" json:"document,omitempty" xml:"document,omitempty"`
	Address   *AddressDTOResponseBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	Phone     *string                 `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	CartIds   []string                `form:"cart_ids,omitempty" json:"cart_ids,omitempty" xml:"cart_ids,omitempty"`
}

// CreatePurchaseResponseBody is the type of the "catalog" service
// "create_purchase" endpoint HTTP response body.
type CreatePurchaseResponseBody struct {
	ID       *string                  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Customer *CustomerDTOResponseBody `form:"customer,omitempty" json:"customer,omitempty" xml:"customer,omitempty"`
	Cart     *CartDTOResponseBody     `form:"cart,omitempty" json:"cart,omitempty" xml:"cart,omitempty"`
}

// CreateStateResponseBody is the type of the "catalog" service "create_state"
// endpoint HTTP response body.
type CreateStateResponseBody struct {
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name      *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	CountryID *string `form:"country_id,omitempty" json:"country_id,omitempty" xml:"country_id,omitempty"`
}

// ListStatesResponseBody is the type of the "catalog" service "list_states"
// endpoint HTTP response body.
type ListStatesResponseBody []*StateDTOResponse

// ShowStateResponseBody is the type of the "catalog" service "show_state"
// endpoint HTTP response body.
type ShowStateResponseBody struct {
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name      *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	CountryID *string `form:"country_id,omitempty" json:"country_id,omitempty" xml:"country_id,omitempty"`
}

// CreateActorInvalidFieldsResponseBody is the type of the "catalog" service
// "create_actor" endpoint HTTP response body for the "invalid_fields" error.
type CreateActorInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowActorNotFoundResponseBody is the type of the "catalog" service
// "show_actor" endpoint HTTP response body for the "not_found" error.
type ShowActorNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBookInvalidFieldsResponseBody is the type of the "catalog" service
// "create_book" endpoint HTTP response body for the "invalid_fields" error.
type CreateBookInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowBookNotFoundResponseBody is the type of the "catalog" service
// "show_book" endpoint HTTP response body for the "not_found" error.
type ShowBookNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateCartInvalidFieldsResponseBody is the type of the "catalog" service
// "create_cart" endpoint HTTP response body for the "invalid_fields" error.
type CreateCartInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateCategoryInvalidFieldsResponseBody is the type of the "catalog" service
// "create_category" endpoint HTTP response body for the "invalid_fields" error.
type CreateCategoryInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowCategoryNotFoundResponseBody is the type of the "catalog" service
// "show_category" endpoint HTTP response body for the "not_found" error.
type ShowCategoryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateCountryInvalidFieldsResponseBody is the type of the "catalog" service
// "create_country" endpoint HTTP response body for the "invalid_fields" error.
type CreateCountryInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowCountryNotFoundResponseBody is the type of the "catalog" service
// "show_country" endpoint HTTP response body for the "not_found" error.
type ShowCountryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateCouponInvalidFieldsResponseBody is the type of the "catalog" service
// "create_coupon" endpoint HTTP response body for the "invalid_fields" error.
type CreateCouponInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateCustomerInvalidFieldsResponseBody is the type of the "catalog" service
// "create_customer" endpoint HTTP response body for the "invalid_fields" error.
type CreateCustomerInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreatePurchaseInvalidFieldsResponseBody is the type of the "catalog" service
// "create_purchase" endpoint HTTP response body for the "invalid_fields" error.
type CreatePurchaseInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateStateInvalidFieldsResponseBody is the type of the "catalog" service
// "create_state" endpoint HTTP response body for the "invalid_fields" error.
type CreateStateInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ShowStateNotFoundResponseBody is the type of the "catalog" service
// "show_state" endpoint HTTP response body for the "not_found" error.
type ShowStateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ActorDTOResponse is used to define fields on response body types.
type ActorDTOResponse struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Email       *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	CreatedAt   *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// BookDTOResponse is used to define fields on response body types.
type BookDTOResponse struct {
	ID          *string  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title       *string  `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Synopsis    *string  `form:"synopsis,omitempty" json:"synopsis,omitempty" xml:"synopsis,omitempty"`
	Summary     *string  `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	Price       *float32 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	Pages       *int     `form:"pages,omitempty" json:"pages,omitempty" xml:"pages,omitempty"`
	Isbn        *string  `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
	Issue       *string  `form:"issue,omitempty" json:"issue,omitempty" xml:"issue,omitempty"`
	CategoryIds []string `form:"category_ids,omitempty" json:"category_ids,omitempty" xml:"category_ids,omitempty"`
	ActorIds    []string `form:"actor_ids,omitempty" json:"actor_ids,omitempty" xml:"actor_ids,omitempty"`
}

// ItemDTORequestBody is used to define fields on request body types.
type ItemDTORequestBody struct {
	BookID string `form:"book_id" json:"book_id" xml:"book_id"`
	Amount int32  `form:"amount" json:"amount" xml:"amount"`
}

// ItemDTOResponseBody is used to define fields on response body types.
type ItemDTOResponseBody struct {
	BookID *string `form:"book_id,omitempty" json:"book_id,omitempty" xml:"book_id,omitempty"`
	Amount *int32  `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
}

// CategoryDTOResponse is used to define fields on response body types.
type CategoryDTOResponse struct {
	ID   *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// CountryDTOResponse is used to define fields on response body types.
type CountryDTOResponse struct {
	ID       *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name     *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	StateIds *string `form:"state_ids,omitempty" json:"state_ids,omitempty" xml:"state_ids,omitempty"`
}

// AddressDTORequestBody is used to define fields on request body types.
type AddressDTORequestBody struct {
	Address    string `form:"address" json:"address" xml:"address"`
	Complement string `form:"complement" json:"complement" xml:"complement"`
	City       string `form:"city" json:"city" xml:"city"`
	StateID    string `form:"state_id" json:"state_id" xml:"state_id"`
	Cep        string `form:"cep" json:"cep" xml:"cep"`
}

// AddressDTOResponseBody is used to define fields on response body types.
type AddressDTOResponseBody struct {
	Address    *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	Complement *string `form:"complement,omitempty" json:"complement,omitempty" xml:"complement,omitempty"`
	City       *string `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
	StateID    *string `form:"state_id,omitempty" json:"state_id,omitempty" xml:"state_id,omitempty"`
	Cep        *string `form:"cep,omitempty" json:"cep,omitempty" xml:"cep,omitempty"`
}

// CreateCustomerDTORequestBody is used to define fields on request body types.
type CreateCustomerDTORequestBody struct {
	FirstName string                 `form:"first_name" json:"first_name" xml:"first_name"`
	LastName  string                 `form:"last_name" json:"last_name" xml:"last_name"`
	Email     string                 `form:"email" json:"email" xml:"email"`
	Document  string                 `form:"document" json:"document" xml:"document"`
	Address   *AddressDTORequestBody `form:"address" json:"address" xml:"address"`
	Phone     string                 `form:"phone" json:"phone" xml:"phone"`
	CartIds   []string               `form:"cart_ids,omitempty" json:"cart_ids,omitempty" xml:"cart_ids,omitempty"`
}

// CreateCartDTORequestBody is used to define fields on request body types.
type CreateCartDTORequestBody struct {
	Total      float32               `form:"total" json:"total" xml:"total"`
	Items      []*ItemDTORequestBody `form:"items" json:"items" xml:"items"`
	CustomerID *string               `form:"customer_id,omitempty" json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	CouponID   *string               `form:"coupon_id,omitempty" json:"coupon_id,omitempty" xml:"coupon_id,omitempty"`
}

// CustomerDTOResponseBody is used to define fields on response body types.
type CustomerDTOResponseBody struct {
	ID        *string                 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	FirstName *string                 `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	LastName  *string                 `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	Email     *string                 `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Document  *string                 `form:"document,omitempty" json:"document,omitempty" xml:"document,omitempty"`
	Address   *AddressDTOResponseBody `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	Phone     *string                 `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	CartIds   []string                `form:"cart_ids,omitempty" json:"cart_ids,omitempty" xml:"cart_ids,omitempty"`
}

// CartDTOResponseBody is used to define fields on response body types.
type CartDTOResponseBody struct {
	ID         *string                `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Total      *float32               `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	Items      []*ItemDTOResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	CustomerID *string                `form:"customer_id,omitempty" json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	CouponID   *string                `form:"coupon_id,omitempty" json:"coupon_id,omitempty" xml:"coupon_id,omitempty"`
}

// StateDTOResponse is used to define fields on response body types.
type StateDTOResponse struct {
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name      *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	CountryID *string `form:"country_id,omitempty" json:"country_id,omitempty" xml:"country_id,omitempty"`
}

// NewCreateActorRequestBody builds the HTTP request body from the payload of
// the "create_actor" endpoint of the "catalog" service.
func NewCreateActorRequestBody(p *catalog.CreateActorDTO) *CreateActorRequestBody {
	body := &CreateActorRequestBody{
		Name:        p.Name,
		Email:       p.Email,
		Description: p.Description,
	}
	return body
}

// NewCreateBookRequestBody builds the HTTP request body from the payload of
// the "create_book" endpoint of the "catalog" service.
func NewCreateBookRequestBody(p *catalog.CreateBookDTO) *CreateBookRequestBody {
	body := &CreateBookRequestBody{
		Title:    p.Title,
		Synopsis: p.Synopsis,
		Summary:  p.Summary,
		Price:    p.Price,
		Pages:    p.Pages,
		Isbn:     p.Isbn,
		Issue:    p.Issue,
	}
	if p.CategoryIds != nil {
		body.CategoryIds = make([]string, len(p.CategoryIds))
		for i, val := range p.CategoryIds {
			body.CategoryIds[i] = val
		}
	}
	if p.ActorIds != nil {
		body.ActorIds = make([]string, len(p.ActorIds))
		for i, val := range p.ActorIds {
			body.ActorIds[i] = val
		}
	}
	return body
}

// NewCreateCartRequestBody builds the HTTP request body from the payload of
// the "create_cart" endpoint of the "catalog" service.
func NewCreateCartRequestBody(p *catalog.CreateCartDTO) *CreateCartRequestBody {
	body := &CreateCartRequestBody{
		Total:      p.Total,
		CustomerID: p.CustomerID,
		CouponID:   p.CouponID,
	}
	if p.Items != nil {
		body.Items = make([]*ItemDTORequestBody, len(p.Items))
		for i, val := range p.Items {
			body.Items[i] = marshalCatalogItemDTOToItemDTORequestBody(val)
		}
	}
	return body
}

// NewCreateCategoryRequestBody builds the HTTP request body from the payload
// of the "create_category" endpoint of the "catalog" service.
func NewCreateCategoryRequestBody(p *catalog.CreateCategoryDTO) *CreateCategoryRequestBody {
	body := &CreateCategoryRequestBody{
		Name: p.Name,
	}
	return body
}

// NewCreateCountryRequestBody builds the HTTP request body from the payload of
// the "create_country" endpoint of the "catalog" service.
func NewCreateCountryRequestBody(p *catalog.CreateCountryDTO) *CreateCountryRequestBody {
	body := &CreateCountryRequestBody{
		Name: p.Name,
	}
	return body
}

// NewCreateCouponRequestBody builds the HTTP request body from the payload of
// the "create_coupon" endpoint of the "catalog" service.
func NewCreateCouponRequestBody(p *catalog.CreateCouponDTO) *CreateCouponRequestBody {
	body := &CreateCouponRequestBody{
		Code:     p.Code,
		Discount: p.Discount,
		Validity: p.Validity,
	}
	return body
}

// NewCreateCustomerRequestBody builds the HTTP request body from the payload
// of the "create_customer" endpoint of the "catalog" service.
func NewCreateCustomerRequestBody(p *catalog.CreateCustomerDTO) *CreateCustomerRequestBody {
	body := &CreateCustomerRequestBody{
		FirstName: p.FirstName,
		LastName:  p.LastName,
		Email:     p.Email,
		Document:  p.Document,
		Phone:     p.Phone,
	}
	if p.Address != nil {
		body.Address = marshalCatalogAddressDTOToAddressDTORequestBody(p.Address)
	}
	if p.CartIds != nil {
		body.CartIds = make([]string, len(p.CartIds))
		for i, val := range p.CartIds {
			body.CartIds[i] = val
		}
	}
	return body
}

// NewCreatePurchaseRequestBody builds the HTTP request body from the payload
// of the "create_purchase" endpoint of the "catalog" service.
func NewCreatePurchaseRequestBody(p *catalog.CreatePurchaseDTO) *CreatePurchaseRequestBody {
	body := &CreatePurchaseRequestBody{}
	if p.Customer != nil {
		body.Customer = marshalCatalogCreateCustomerDTOToCreateCustomerDTORequestBody(p.Customer)
	}
	if p.Cart != nil {
		body.Cart = marshalCatalogCreateCartDTOToCreateCartDTORequestBody(p.Cart)
	}
	return body
}

// NewCreateStateRequestBody builds the HTTP request body from the payload of
// the "create_state" endpoint of the "catalog" service.
func NewCreateStateRequestBody(p *catalog.CreateStateDTO) *CreateStateRequestBody {
	body := &CreateStateRequestBody{
		Name:      p.Name,
		CountryID: p.CountryID,
	}
	return body
}

// NewCreateActorActorDTOCreated builds a "catalog" service "create_actor"
// endpoint result from a HTTP "Created" response.
func NewCreateActorActorDTOCreated(body *CreateActorResponseBody) *catalog.ActorDTO {
	v := &catalog.ActorDTO{
		ID:          *body.ID,
		Name:        *body.Name,
		Email:       *body.Email,
		Description: *body.Description,
		CreatedAt:   *body.CreatedAt,
	}

	return v
}

// NewCreateActorInvalidFields builds a catalog service create_actor endpoint
// invalid_fields error.
func NewCreateActorInvalidFields(body *CreateActorInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListActorsActorDTOOK builds a "catalog" service "list_actors" endpoint
// result from a HTTP "OK" response.
func NewListActorsActorDTOOK(body []*ActorDTOResponse) []*catalog.ActorDTO {
	v := make([]*catalog.ActorDTO, len(body))
	for i, val := range body {
		v[i] = unmarshalActorDTOResponseToCatalogActorDTO(val)
	}
	return v
}

// NewShowActorActorDTOOK builds a "catalog" service "show_actor" endpoint
// result from a HTTP "OK" response.
func NewShowActorActorDTOOK(body *ShowActorResponseBody) *catalog.ActorDTO {
	v := &catalog.ActorDTO{
		ID:          *body.ID,
		Name:        *body.Name,
		Email:       *body.Email,
		Description: *body.Description,
		CreatedAt:   *body.CreatedAt,
	}

	return v
}

// NewShowActorNotFound builds a catalog service show_actor endpoint not_found
// error.
func NewShowActorNotFound(body *ShowActorNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBookBookDTOCreated builds a "catalog" service "create_book"
// endpoint result from a HTTP "Created" response.
func NewCreateBookBookDTOCreated(body *CreateBookResponseBody) *catalog.BookDTO {
	v := &catalog.BookDTO{
		ID:       *body.ID,
		Title:    *body.Title,
		Synopsis: *body.Synopsis,
		Summary:  body.Summary,
		Price:    *body.Price,
		Pages:    *body.Pages,
		Isbn:     *body.Isbn,
		Issue:    *body.Issue,
	}
	v.CategoryIds = make([]string, len(body.CategoryIds))
	for i, val := range body.CategoryIds {
		v.CategoryIds[i] = val
	}
	v.ActorIds = make([]string, len(body.ActorIds))
	for i, val := range body.ActorIds {
		v.ActorIds[i] = val
	}

	return v
}

// NewCreateBookInvalidFields builds a catalog service create_book endpoint
// invalid_fields error.
func NewCreateBookInvalidFields(body *CreateBookInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListBooksBookDTOOK builds a "catalog" service "list_books" endpoint
// result from a HTTP "OK" response.
func NewListBooksBookDTOOK(body []*BookDTOResponse) []*catalog.BookDTO {
	v := make([]*catalog.BookDTO, len(body))
	for i, val := range body {
		v[i] = unmarshalBookDTOResponseToCatalogBookDTO(val)
	}
	return v
}

// NewShowBookBookDTOOK builds a "catalog" service "show_book" endpoint result
// from a HTTP "OK" response.
func NewShowBookBookDTOOK(body *ShowBookResponseBody) *catalog.BookDTO {
	v := &catalog.BookDTO{
		ID:       *body.ID,
		Title:    *body.Title,
		Synopsis: *body.Synopsis,
		Summary:  body.Summary,
		Price:    *body.Price,
		Pages:    *body.Pages,
		Isbn:     *body.Isbn,
		Issue:    *body.Issue,
	}
	v.CategoryIds = make([]string, len(body.CategoryIds))
	for i, val := range body.CategoryIds {
		v.CategoryIds[i] = val
	}
	v.ActorIds = make([]string, len(body.ActorIds))
	for i, val := range body.ActorIds {
		v.ActorIds[i] = val
	}

	return v
}

// NewShowBookNotFound builds a catalog service show_book endpoint not_found
// error.
func NewShowBookNotFound(body *ShowBookNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateCartCartDTOCreated builds a "catalog" service "create_cart"
// endpoint result from a HTTP "Created" response.
func NewCreateCartCartDTOCreated(body *CreateCartResponseBody) *catalog.CartDTO {
	v := &catalog.CartDTO{
		ID:         *body.ID,
		Total:      *body.Total,
		CustomerID: *body.CustomerID,
		CouponID:   body.CouponID,
	}
	v.Items = make([]*catalog.ItemDTO, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalItemDTOResponseBodyToCatalogItemDTO(val)
	}

	return v
}

// NewCreateCartInvalidFields builds a catalog service create_cart endpoint
// invalid_fields error.
func NewCreateCartInvalidFields(body *CreateCartInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateCategoryCategoryDTOCreated builds a "catalog" service
// "create_category" endpoint result from a HTTP "Created" response.
func NewCreateCategoryCategoryDTOCreated(body *CreateCategoryResponseBody) *catalog.CategoryDTO {
	v := &catalog.CategoryDTO{
		ID:   *body.ID,
		Name: *body.Name,
	}

	return v
}

// NewCreateCategoryInvalidFields builds a catalog service create_category
// endpoint invalid_fields error.
func NewCreateCategoryInvalidFields(body *CreateCategoryInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListCategoriesCategoryDTOOK builds a "catalog" service "list_categories"
// endpoint result from a HTTP "OK" response.
func NewListCategoriesCategoryDTOOK(body []*CategoryDTOResponse) []*catalog.CategoryDTO {
	v := make([]*catalog.CategoryDTO, len(body))
	for i, val := range body {
		v[i] = unmarshalCategoryDTOResponseToCatalogCategoryDTO(val)
	}
	return v
}

// NewShowCategoryCategoryDTOOK builds a "catalog" service "show_category"
// endpoint result from a HTTP "OK" response.
func NewShowCategoryCategoryDTOOK(body *ShowCategoryResponseBody) *catalog.CategoryDTO {
	v := &catalog.CategoryDTO{
		ID:   *body.ID,
		Name: *body.Name,
	}

	return v
}

// NewShowCategoryNotFound builds a catalog service show_category endpoint
// not_found error.
func NewShowCategoryNotFound(body *ShowCategoryNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateCountryCountryDTOCreated builds a "catalog" service
// "create_country" endpoint result from a HTTP "Created" response.
func NewCreateCountryCountryDTOCreated(body *CreateCountryResponseBody) *catalog.CountryDTO {
	v := &catalog.CountryDTO{
		ID:       *body.ID,
		Name:     *body.Name,
		StateIds: body.StateIds,
	}

	return v
}

// NewCreateCountryInvalidFields builds a catalog service create_country
// endpoint invalid_fields error.
func NewCreateCountryInvalidFields(body *CreateCountryInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListCountriesCountryDTOOK builds a "catalog" service "list_countries"
// endpoint result from a HTTP "OK" response.
func NewListCountriesCountryDTOOK(body []*CountryDTOResponse) []*catalog.CountryDTO {
	v := make([]*catalog.CountryDTO, len(body))
	for i, val := range body {
		v[i] = unmarshalCountryDTOResponseToCatalogCountryDTO(val)
	}
	return v
}

// NewShowCountryCountryDTOOK builds a "catalog" service "show_country"
// endpoint result from a HTTP "OK" response.
func NewShowCountryCountryDTOOK(body *ShowCountryResponseBody) *catalog.CountryDTO {
	v := &catalog.CountryDTO{
		ID:       *body.ID,
		Name:     *body.Name,
		StateIds: body.StateIds,
	}

	return v
}

// NewShowCountryNotFound builds a catalog service show_country endpoint
// not_found error.
func NewShowCountryNotFound(body *ShowCountryNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateCouponCouponDTOCreated builds a "catalog" service "create_coupon"
// endpoint result from a HTTP "Created" response.
func NewCreateCouponCouponDTOCreated(body *CreateCouponResponseBody) *catalog.CouponDTO {
	v := &catalog.CouponDTO{
		ID:       *body.ID,
		Code:     *body.Code,
		Discount: *body.Discount,
		Validity: *body.Validity,
	}

	return v
}

// NewCreateCouponInvalidFields builds a catalog service create_coupon endpoint
// invalid_fields error.
func NewCreateCouponInvalidFields(body *CreateCouponInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateCustomerCustomerDTOCreated builds a "catalog" service
// "create_customer" endpoint result from a HTTP "Created" response.
func NewCreateCustomerCustomerDTOCreated(body *CreateCustomerResponseBody) *catalog.CustomerDTO {
	v := &catalog.CustomerDTO{
		ID:        *body.ID,
		FirstName: *body.FirstName,
		LastName:  *body.LastName,
		Email:     *body.Email,
		Document:  *body.Document,
		Phone:     *body.Phone,
	}
	v.Address = unmarshalAddressDTOResponseBodyToCatalogAddressDTO(body.Address)
	if body.CartIds != nil {
		v.CartIds = make([]string, len(body.CartIds))
		for i, val := range body.CartIds {
			v.CartIds[i] = val
		}
	}

	return v
}

// NewCreateCustomerInvalidFields builds a catalog service create_customer
// endpoint invalid_fields error.
func NewCreateCustomerInvalidFields(body *CreateCustomerInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreatePurchasePurchaseDTOCreated builds a "catalog" service
// "create_purchase" endpoint result from a HTTP "Created" response.
func NewCreatePurchasePurchaseDTOCreated(body *CreatePurchaseResponseBody) *catalog.PurchaseDTO {
	v := &catalog.PurchaseDTO{
		ID: *body.ID,
	}
	v.Customer = unmarshalCustomerDTOResponseBodyToCatalogCustomerDTO(body.Customer)
	v.Cart = unmarshalCartDTOResponseBodyToCatalogCartDTO(body.Cart)

	return v
}

// NewCreatePurchaseInvalidFields builds a catalog service create_purchase
// endpoint invalid_fields error.
func NewCreatePurchaseInvalidFields(body *CreatePurchaseInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateStateStateDTOCreated builds a "catalog" service "create_state"
// endpoint result from a HTTP "Created" response.
func NewCreateStateStateDTOCreated(body *CreateStateResponseBody) *catalog.StateDTO {
	v := &catalog.StateDTO{
		ID:        *body.ID,
		Name:      *body.Name,
		CountryID: *body.CountryID,
	}

	return v
}

// NewCreateStateInvalidFields builds a catalog service create_state endpoint
// invalid_fields error.
func NewCreateStateInvalidFields(body *CreateStateInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListStatesStateDTOOK builds a "catalog" service "list_states" endpoint
// result from a HTTP "OK" response.
func NewListStatesStateDTOOK(body []*StateDTOResponse) []*catalog.StateDTO {
	v := make([]*catalog.StateDTO, len(body))
	for i, val := range body {
		v[i] = unmarshalStateDTOResponseToCatalogStateDTO(val)
	}
	return v
}

// NewShowStateStateDTOOK builds a "catalog" service "show_state" endpoint
// result from a HTTP "OK" response.
func NewShowStateStateDTOOK(body *ShowStateResponseBody) *catalog.StateDTO {
	v := &catalog.StateDTO{
		ID:        *body.ID,
		Name:      *body.Name,
		CountryID: *body.CountryID,
	}

	return v
}

// NewShowStateNotFound builds a catalog service show_state endpoint not_found
// error.
func NewShowStateNotFound(body *ShowStateNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateActorResponseBody runs the validations defined on
// create_actor_response_body
func ValidateCreateActorResponseBody(body *CreateActorResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 400 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 400, false))
		}
	}
	return
}

// ValidateShowActorResponseBody runs the validations defined on
// show_actor_response_body
func ValidateShowActorResponseBody(body *ShowActorResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 400 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 400, false))
		}
	}
	return
}

// ValidateCreateBookResponseBody runs the validations defined on
// create_book_response_body
func ValidateCreateBookResponseBody(body *CreateBookResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Synopsis == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("synopsis", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Pages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pages", "body"))
	}
	if body.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isbn", "body"))
	}
	if body.Issue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("issue", "body"))
	}
	if body.CategoryIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category_ids", "body"))
	}
	if body.ActorIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actor_ids", "body"))
	}
	if body.Synopsis != nil {
		if utf8.RuneCountInString(*body.Synopsis) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.synopsis", *body.Synopsis, utf8.RuneCountInString(*body.Synopsis), 500, false))
		}
	}
	if body.Price != nil {
		if *body.Price < 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 20, true))
		}
	}
	if body.Pages != nil {
		if *body.Pages < 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.pages", *body.Pages, 100, true))
		}
	}
	return
}

// ValidateShowBookResponseBody runs the validations defined on
// show_book_response_body
func ValidateShowBookResponseBody(body *ShowBookResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Synopsis == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("synopsis", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Pages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pages", "body"))
	}
	if body.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isbn", "body"))
	}
	if body.Issue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("issue", "body"))
	}
	if body.CategoryIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category_ids", "body"))
	}
	if body.ActorIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actor_ids", "body"))
	}
	if body.Synopsis != nil {
		if utf8.RuneCountInString(*body.Synopsis) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.synopsis", *body.Synopsis, utf8.RuneCountInString(*body.Synopsis), 500, false))
		}
	}
	if body.Price != nil {
		if *body.Price < 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 20, true))
		}
	}
	if body.Pages != nil {
		if *body.Pages < 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.pages", *body.Pages, 100, true))
		}
	}
	return
}

// ValidateCreateCartResponseBody runs the validations defined on
// create_cart_response_body
func ValidateCreateCartResponseBody(body *CreateCartResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.CustomerID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_id", "body"))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateItemDTOResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateCategoryResponseBody runs the validations defined on
// create_category_response_body
func ValidateCreateCategoryResponseBody(body *CreateCategoryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateShowCategoryResponseBody runs the validations defined on
// show_category_response_body
func ValidateShowCategoryResponseBody(body *ShowCategoryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateCreateCountryResponseBody runs the validations defined on
// create_country_response_body
func ValidateCreateCountryResponseBody(body *CreateCountryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateShowCountryResponseBody runs the validations defined on
// show_country_response_body
func ValidateShowCountryResponseBody(body *ShowCountryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateCreateCouponResponseBody runs the validations defined on
// create_coupon_response_body
func ValidateCreateCouponResponseBody(body *CreateCouponResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Discount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("discount", "body"))
	}
	if body.Validity == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("validity", "body"))
	}
	if body.Discount != nil {
		if *body.Discount < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.discount", *body.Discount, 0, true))
		}
	}
	return
}

// ValidateCreateCustomerResponseBody runs the validations defined on
// create_customer_response_body
func ValidateCreateCustomerResponseBody(body *CreateCustomerResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Document == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("document", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Phone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phone", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Address != nil {
		if err2 := ValidateAddressDTOResponseBody(body.Address); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreatePurchaseResponseBody runs the validations defined on
// create_purchase_response_body
func ValidateCreatePurchaseResponseBody(body *CreatePurchaseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Customer == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer", "body"))
	}
	if body.Cart == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cart", "body"))
	}
	if body.Customer != nil {
		if err2 := ValidateCustomerDTOResponseBody(body.Customer); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Cart != nil {
		if err2 := ValidateCartDTOResponseBody(body.Cart); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateStateResponseBody runs the validations defined on
// create_state_response_body
func ValidateCreateStateResponseBody(body *CreateStateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.CountryID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("country_id", "body"))
	}
	return
}

// ValidateShowStateResponseBody runs the validations defined on
// show_state_response_body
func ValidateShowStateResponseBody(body *ShowStateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.CountryID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("country_id", "body"))
	}
	return
}

// ValidateCreateActorInvalidFieldsResponseBody runs the validations defined on
// create_actor_invalid_fields_response_body
func ValidateCreateActorInvalidFieldsResponseBody(body *CreateActorInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowActorNotFoundResponseBody runs the validations defined on
// show_actor_not_found_response_body
func ValidateShowActorNotFoundResponseBody(body *ShowActorNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBookInvalidFieldsResponseBody runs the validations defined on
// create_book_invalid_fields_response_body
func ValidateCreateBookInvalidFieldsResponseBody(body *CreateBookInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowBookNotFoundResponseBody runs the validations defined on
// show_book_not_found_response_body
func ValidateShowBookNotFoundResponseBody(body *ShowBookNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateCartInvalidFieldsResponseBody runs the validations defined on
// create_cart_invalid_fields_response_body
func ValidateCreateCartInvalidFieldsResponseBody(body *CreateCartInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateCategoryInvalidFieldsResponseBody runs the validations defined
// on create_category_invalid_fields_response_body
func ValidateCreateCategoryInvalidFieldsResponseBody(body *CreateCategoryInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowCategoryNotFoundResponseBody runs the validations defined on
// show_category_not_found_response_body
func ValidateShowCategoryNotFoundResponseBody(body *ShowCategoryNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateCountryInvalidFieldsResponseBody runs the validations defined
// on create_country_invalid_fields_response_body
func ValidateCreateCountryInvalidFieldsResponseBody(body *CreateCountryInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowCountryNotFoundResponseBody runs the validations defined on
// show_country_not_found_response_body
func ValidateShowCountryNotFoundResponseBody(body *ShowCountryNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateCouponInvalidFieldsResponseBody runs the validations defined
// on create_coupon_invalid_fields_response_body
func ValidateCreateCouponInvalidFieldsResponseBody(body *CreateCouponInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateCustomerInvalidFieldsResponseBody runs the validations defined
// on create_customer_invalid_fields_response_body
func ValidateCreateCustomerInvalidFieldsResponseBody(body *CreateCustomerInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreatePurchaseInvalidFieldsResponseBody runs the validations defined
// on create_purchase_invalid_fields_response_body
func ValidateCreatePurchaseInvalidFieldsResponseBody(body *CreatePurchaseInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateStateInvalidFieldsResponseBody runs the validations defined on
// create_state_invalid_fields_response_body
func ValidateCreateStateInvalidFieldsResponseBody(body *CreateStateInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateShowStateNotFoundResponseBody runs the validations defined on
// show_state_not_found_response_body
func ValidateShowStateNotFoundResponseBody(body *ShowStateNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateActorDTOResponse runs the validations defined on ActorDTOResponse
func ValidateActorDTOResponse(body *ActorDTOResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 400 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 400, false))
		}
	}
	return
}

// ValidateBookDTOResponse runs the validations defined on BookDTOResponse
func ValidateBookDTOResponse(body *BookDTOResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Synopsis == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("synopsis", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Pages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pages", "body"))
	}
	if body.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isbn", "body"))
	}
	if body.Issue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("issue", "body"))
	}
	if body.CategoryIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category_ids", "body"))
	}
	if body.ActorIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actor_ids", "body"))
	}
	if body.Synopsis != nil {
		if utf8.RuneCountInString(*body.Synopsis) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.synopsis", *body.Synopsis, utf8.RuneCountInString(*body.Synopsis), 500, false))
		}
	}
	if body.Price != nil {
		if *body.Price < 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 20, true))
		}
	}
	if body.Pages != nil {
		if *body.Pages < 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.pages", *body.Pages, 100, true))
		}
	}
	return
}

// ValidateItemDTORequestBody runs the validations defined on ItemDTORequestBody
func ValidateItemDTORequestBody(body *ItemDTORequestBody) (err error) {
	if body.Amount < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.amount", body.Amount, 1, true))
	}
	return
}

// ValidateItemDTOResponseBody runs the validations defined on
// ItemDTOResponseBody
func ValidateItemDTOResponseBody(body *ItemDTOResponseBody) (err error) {
	if body.BookID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("book_id", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "body"))
	}
	if body.Amount != nil {
		if *body.Amount < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.amount", *body.Amount, 1, true))
		}
	}
	return
}

// ValidateCategoryDTOResponse runs the validations defined on
// CategoryDTOResponse
func ValidateCategoryDTOResponse(body *CategoryDTOResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateCountryDTOResponse runs the validations defined on CountryDTOResponse
func ValidateCountryDTOResponse(body *CountryDTOResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateAddressDTOResponseBody runs the validations defined on
// AddressDTOResponseBody
func ValidateAddressDTOResponseBody(body *AddressDTOResponseBody) (err error) {
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Complement == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("complement", "body"))
	}
	if body.City == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("city", "body"))
	}
	if body.StateID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("state_id", "body"))
	}
	if body.Cep == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cep", "body"))
	}
	return
}

// ValidateCreateCustomerDTORequestBody runs the validations defined on
// CreateCustomerDTORequestBody
func ValidateCreateCustomerDTORequestBody(body *CreateCustomerDTORequestBody) (err error) {
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))

	return
}

// ValidateCreateCartDTORequestBody runs the validations defined on
// CreateCartDTORequestBody
func ValidateCreateCartDTORequestBody(body *CreateCartDTORequestBody) (err error) {
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if len(body.Items) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.items", body.Items, len(body.Items), 1, true))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateItemDTORequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCustomerDTOResponseBody runs the validations defined on
// CustomerDTOResponseBody
func ValidateCustomerDTOResponseBody(body *CustomerDTOResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Document == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("document", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Phone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phone", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Address != nil {
		if err2 := ValidateAddressDTOResponseBody(body.Address); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCartDTOResponseBody runs the validations defined on
// CartDTOResponseBody
func ValidateCartDTOResponseBody(body *CartDTOResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.CustomerID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer_id", "body"))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateItemDTOResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStateDTOResponse runs the validations defined on StateDTOResponse
func ValidateStateDTOResponse(body *StateDTOResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.CountryID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("country_id", "body"))
	}
	return
}
