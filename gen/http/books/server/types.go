// Code generated by goa v3.2.4, DO NOT EDIT.
//
// books HTTP server types
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package server

import (
	"unicode/utf8"

	books "github.com/selmison/seed-desafio-cdc/gen/books"
	goa "goa.design/goa/v3/pkg"
)

// CreateBookRequestBody is the type of the "books" service "create_book"
// endpoint HTTP request body.
type CreateBookRequestBody struct {
	Title      *string  `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Synopsis   *string  `form:"synopsis,omitempty" json:"synopsis,omitempty" xml:"synopsis,omitempty"`
	Summary    *string  `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	Price      *float32 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	Pages      *int     `form:"pages,omitempty" json:"pages,omitempty" xml:"pages,omitempty"`
	Isbn       *string  `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
	Issue      *string  `form:"issue,omitempty" json:"issue,omitempty" xml:"issue,omitempty"`
	CategoryID *string  `form:"category_id,omitempty" json:"category_id,omitempty" xml:"category_id,omitempty"`
	ActorID    *string  `form:"actor_id,omitempty" json:"actor_id,omitempty" xml:"actor_id,omitempty"`
}

// CreateBookResponseBody is the type of the "books" service "create_book"
// endpoint HTTP response body.
type CreateBookResponseBody struct {
	ID         string  `form:"id" json:"id" xml:"id"`
	Title      string  `form:"title" json:"title" xml:"title"`
	Synopsis   string  `form:"synopsis" json:"synopsis" xml:"synopsis"`
	Summary    *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	Price      float32 `form:"price" json:"price" xml:"price"`
	Pages      int     `form:"pages" json:"pages" xml:"pages"`
	Isbn       string  `form:"isbn" json:"isbn" xml:"isbn"`
	Issue      string  `form:"issue" json:"issue" xml:"issue"`
	CategoryID string  `form:"category_id" json:"category_id" xml:"category_id"`
	ActorID    string  `form:"actor_id" json:"actor_id" xml:"actor_id"`
}

// ListBooksResponseBody is the type of the "books" service "list_books"
// endpoint HTTP response body.
type ListBooksResponseBody []*BookDTOResponse

// CreateBookInvalidFieldsResponseBody is the type of the "books" service
// "create_book" endpoint HTTP response body for the "invalid_fields" error.
type CreateBookInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BookDTOResponse is used to define fields on response body types.
type BookDTOResponse struct {
	ID         string  `form:"id" json:"id" xml:"id"`
	Title      string  `form:"title" json:"title" xml:"title"`
	Synopsis   string  `form:"synopsis" json:"synopsis" xml:"synopsis"`
	Summary    *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	Price      float32 `form:"price" json:"price" xml:"price"`
	Pages      int     `form:"pages" json:"pages" xml:"pages"`
	Isbn       string  `form:"isbn" json:"isbn" xml:"isbn"`
	Issue      string  `form:"issue" json:"issue" xml:"issue"`
	CategoryID string  `form:"category_id" json:"category_id" xml:"category_id"`
	ActorID    string  `form:"actor_id" json:"actor_id" xml:"actor_id"`
}

// NewCreateBookResponseBody builds the HTTP response body from the result of
// the "create_book" endpoint of the "books" service.
func NewCreateBookResponseBody(res *books.BookDTO) *CreateBookResponseBody {
	body := &CreateBookResponseBody{
		ID:         res.ID,
		Title:      res.Title,
		Synopsis:   res.Synopsis,
		Summary:    res.Summary,
		Price:      res.Price,
		Pages:      res.Pages,
		Isbn:       res.Isbn,
		Issue:      res.Issue,
		CategoryID: res.CategoryID,
		ActorID:    res.ActorID,
	}
	return body
}

// NewListBooksResponseBody builds the HTTP response body from the result of
// the "list_books" endpoint of the "books" service.
func NewListBooksResponseBody(res []*books.BookDTO) ListBooksResponseBody {
	body := make([]*BookDTOResponse, len(res))
	for i, val := range res {
		body[i] = marshalBooksBookDTOToBookDTOResponse(val)
	}
	return body
}

// NewCreateBookInvalidFieldsResponseBody builds the HTTP response body from
// the result of the "create_book" endpoint of the "books" service.
func NewCreateBookInvalidFieldsResponseBody(res *goa.ServiceError) *CreateBookInvalidFieldsResponseBody {
	body := &CreateBookInvalidFieldsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBookDTO builds a books service create_book endpoint payload.
func NewCreateBookDTO(body *CreateBookRequestBody) *books.CreateBookDTO {
	v := &books.CreateBookDTO{
		Title:      *body.Title,
		Synopsis:   *body.Synopsis,
		Summary:    body.Summary,
		Price:      *body.Price,
		Pages:      *body.Pages,
		Isbn:       *body.Isbn,
		Issue:      *body.Issue,
		CategoryID: *body.CategoryID,
		ActorID:    *body.ActorID,
	}

	return v
}

// ValidateCreateBookRequestBody runs the validations defined on
// create_book_request_body
func ValidateCreateBookRequestBody(body *CreateBookRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Synopsis == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("synopsis", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Pages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pages", "body"))
	}
	if body.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isbn", "body"))
	}
	if body.Issue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("issue", "body"))
	}
	if body.CategoryID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category_id", "body"))
	}
	if body.ActorID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("actor_id", "body"))
	}
	if body.Synopsis != nil {
		if utf8.RuneCountInString(*body.Synopsis) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.synopsis", *body.Synopsis, utf8.RuneCountInString(*body.Synopsis), 500, false))
		}
	}
	if body.Price != nil {
		if *body.Price < 20 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.price", *body.Price, 20, true))
		}
	}
	if body.Pages != nil {
		if *body.Pages < 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.pages", *body.Pages, 100, true))
		}
	}
	return
}
