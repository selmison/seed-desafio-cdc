// Code generated by goa v3.2.4, DO NOT EDIT.
//
// categories HTTP client types
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package client

import (
	categories "github.com/selmison/seed-desafio-cdc/gen/categories"
	goa "goa.design/goa/v3/pkg"
)

// CreateCategoryRequestBody is the type of the "categories" service
// "create_category" endpoint HTTP request body.
type CreateCategoryRequestBody struct {
	Name string `form:"name" json:"name" xml:"name"`
}

// CreateCategoryResponseBody is the type of the "categories" service
// "create_category" endpoint HTTP response body.
type CreateCategoryResponseBody struct {
	ID   *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// CreateCategoryInvalidFieldsResponseBody is the type of the "categories"
// service "create_category" endpoint HTTP response body for the
// "invalid_fields" error.
type CreateCategoryInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewCreateCategoryRequestBody builds the HTTP request body from the payload
// of the "create_category" endpoint of the "categories" service.
func NewCreateCategoryRequestBody(p *categories.CreateCategoryDTO) *CreateCategoryRequestBody {
	body := &CreateCategoryRequestBody{
		Name: p.Name,
	}
	return body
}

// NewCreateCategoryCategoryDTOCreated builds a "categories" service
// "create_category" endpoint result from a HTTP "Created" response.
func NewCreateCategoryCategoryDTOCreated(body *CreateCategoryResponseBody) *categories.CategoryDTO {
	v := &categories.CategoryDTO{
		ID:   *body.ID,
		Name: *body.Name,
	}

	return v
}

// NewCreateCategoryInvalidFields builds a categories service create_category
// endpoint invalid_fields error.
func NewCreateCategoryInvalidFields(body *CreateCategoryInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateCategoryResponseBody runs the validations defined on
// create_category_response_body
func ValidateCreateCategoryResponseBody(body *CreateCategoryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateCreateCategoryInvalidFieldsResponseBody runs the validations defined
// on create_category_invalid_fields_response_body
func ValidateCreateCategoryInvalidFieldsResponseBody(body *CreateCategoryInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
