// Code generated by goa v3.2.4, DO NOT EDIT.
//
// actors HTTP client types
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package client

import (
	"unicode/utf8"

	actors "github.com/selmison/seed-desafio-cdc/gen/actors"
	goa "goa.design/goa/v3/pkg"
)

// CreateActorRequestBody is the type of the "actors" service "create_actor"
// endpoint HTTP request body.
type CreateActorRequestBody struct {
	Name        string `form:"name" json:"name" xml:"name"`
	EMail       string `form:"e-mail" json:"e-mail" xml:"e-mail"`
	Description string `form:"description" json:"description" xml:"description"`
}

// CreateActorResponseBody is the type of the "actors" service "create_actor"
// endpoint HTTP response body.
type CreateActorResponseBody struct {
	ID          *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	EMail       *string `form:"e-mail,omitempty" json:"e-mail,omitempty" xml:"e-mail,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	CreatedAt   *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// CreateActorInvalidFieldsResponseBody is the type of the "actors" service
// "create_actor" endpoint HTTP response body for the "invalid_fields" error.
type CreateActorInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewCreateActorRequestBody builds the HTTP request body from the payload of
// the "create_actor" endpoint of the "actors" service.
func NewCreateActorRequestBody(p *actors.CreateActorDTO) *CreateActorRequestBody {
	body := &CreateActorRequestBody{
		Name:        p.Name,
		EMail:       p.EMail,
		Description: p.Description,
	}
	return body
}

// NewCreateActorActorDTOCreated builds a "actors" service "create_actor"
// endpoint result from a HTTP "Created" response.
func NewCreateActorActorDTOCreated(body *CreateActorResponseBody) *actors.ActorDTO {
	v := &actors.ActorDTO{
		ID:          *body.ID,
		Name:        *body.Name,
		EMail:       *body.EMail,
		Description: *body.Description,
		CreatedAt:   *body.CreatedAt,
	}

	return v
}

// NewCreateActorInvalidFields builds a actors service create_actor endpoint
// invalid_fields error.
func NewCreateActorInvalidFields(body *CreateActorInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateActorResponseBody runs the validations defined on
// create_actor_response_body
func ValidateCreateActorResponseBody(body *CreateActorResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.EMail == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("e-mail", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.EMail != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.e-mail", *body.EMail, goa.FormatEmail))
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 400 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 400, false))
		}
	}
	return
}

// ValidateCreateActorInvalidFieldsResponseBody runs the validations defined on
// create_actor_invalid_fields_response_body
func ValidateCreateActorInvalidFieldsResponseBody(body *CreateActorInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
