// Code generated by goa v3.2.4, DO NOT EDIT.
//
// actors HTTP client CLI support package
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	actors "github.com/selmison/seed-desafio-cdc/gen/actors"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateActorPayload builds the payload for the actors create_actor
// endpoint from CLI flags.
func BuildCreateActorPayload(actorsCreateActorBody string) (*actors.CreateActorDTO, error) {
	var err error
	var body CreateActorRequestBody
	{
		err = json.Unmarshal([]byte(actorsCreateActorBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"0av\",\n      \"e-mail\": \"pietro_reinger@corkery.info\",\n      \"name\": \"Et qui beatae ut quia aliquid eligendi.\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.e-mail", body.EMail, goa.FormatEmail))

		if utf8.RuneCountInString(body.Description) > 400 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", body.Description, utf8.RuneCountInString(body.Description), 400, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &actors.CreateActorDTO{
		Name:        body.Name,
		EMail:       body.EMail,
		Description: body.Description,
	}

	return v, nil
}
