// Code generated by goa v3.2.4, DO NOT EDIT.
//
// actors HTTP server types
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package server

import (
	"unicode/utf8"

	actors "github.com/selmison/seed-desafio-cdc/gen/actors"
	goa "goa.design/goa/v3/pkg"
)

// CreateActorRequestBody is the type of the "actors" service "create_actor"
// endpoint HTTP request body.
type CreateActorRequestBody struct {
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	EMail       *string `form:"e-mail,omitempty" json:"e-mail,omitempty" xml:"e-mail,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// CreateActorResponseBody is the type of the "actors" service "create_actor"
// endpoint HTTP response body.
type CreateActorResponseBody struct {
	ID          string `form:"id" json:"id" xml:"id"`
	Name        string `form:"name" json:"name" xml:"name"`
	EMail       string `form:"e-mail" json:"e-mail" xml:"e-mail"`
	Description string `form:"description" json:"description" xml:"description"`
	CreatedAt   string `form:"created_at" json:"created_at" xml:"created_at"`
}

// CreateActorInvalidFieldsResponseBody is the type of the "actors" service
// "create_actor" endpoint HTTP response body for the "invalid_fields" error.
type CreateActorInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewCreateActorResponseBody builds the HTTP response body from the result of
// the "create_actor" endpoint of the "actors" service.
func NewCreateActorResponseBody(res *actors.ActorDTO) *CreateActorResponseBody {
	body := &CreateActorResponseBody{
		ID:          res.ID,
		Name:        res.Name,
		EMail:       res.EMail,
		Description: res.Description,
		CreatedAt:   res.CreatedAt,
	}
	return body
}

// NewCreateActorInvalidFieldsResponseBody builds the HTTP response body from
// the result of the "create_actor" endpoint of the "actors" service.
func NewCreateActorInvalidFieldsResponseBody(res *goa.ServiceError) *CreateActorInvalidFieldsResponseBody {
	body := &CreateActorInvalidFieldsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateActorDTO builds a actors service create_actor endpoint payload.
func NewCreateActorDTO(body *CreateActorRequestBody) *actors.CreateActorDTO {
	v := &actors.CreateActorDTO{
		Name:        *body.Name,
		EMail:       *body.EMail,
		Description: *body.Description,
	}

	return v
}

// ValidateCreateActorRequestBody runs the validations defined on
// create_actor_request_body
func ValidateCreateActorRequestBody(body *CreateActorRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.EMail == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("e-mail", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.EMail != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.e-mail", *body.EMail, goa.FormatEmail))
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 400 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 400, false))
		}
	}
	return
}
