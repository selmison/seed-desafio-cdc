// Code generated by goa v3.2.4, DO NOT EDIT.
//
// casa_do_codigo HTTP client CLI support package
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	"github.com/go-kit/kit/endpoint"
	catalogc "github.com/selmison/seed-desafio-cdc/gen/http/catalog/client"
	goahttp "goa.design/goa/v3/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `catalog (create-actor|show-actor|create-book|list-books|show-book|create-category|show-category|create-customer|create-cart|create-country|create-state)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` catalog create-actor --body '{
      "description": "te3",
      "email": "hildegard_cruickshank@stroman.net",
      "name": "Voluptates deleniti."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (endpoint.Endpoint, interface{}, error) {
	var (
		catalogFlags = flag.NewFlagSet("catalog", flag.ContinueOnError)

		catalogCreateActorFlags    = flag.NewFlagSet("create-actor", flag.ExitOnError)
		catalogCreateActorBodyFlag = catalogCreateActorFlags.String("body", "REQUIRED", "")

		catalogShowActorFlags  = flag.NewFlagSet("show-actor", flag.ExitOnError)
		catalogShowActorIDFlag = catalogShowActorFlags.String("id", "REQUIRED", "ID")

		catalogCreateBookFlags    = flag.NewFlagSet("create-book", flag.ExitOnError)
		catalogCreateBookBodyFlag = catalogCreateBookFlags.String("body", "REQUIRED", "")

		catalogListBooksFlags = flag.NewFlagSet("list-books", flag.ExitOnError)

		catalogShowBookFlags  = flag.NewFlagSet("show-book", flag.ExitOnError)
		catalogShowBookIDFlag = catalogShowBookFlags.String("id", "REQUIRED", "ID")

		catalogCreateCategoryFlags    = flag.NewFlagSet("create-category", flag.ExitOnError)
		catalogCreateCategoryBodyFlag = catalogCreateCategoryFlags.String("body", "REQUIRED", "")

		catalogShowCategoryFlags  = flag.NewFlagSet("show-category", flag.ExitOnError)
		catalogShowCategoryIDFlag = catalogShowCategoryFlags.String("id", "REQUIRED", "ID")

		catalogCreateCustomerFlags    = flag.NewFlagSet("create-customer", flag.ExitOnError)
		catalogCreateCustomerBodyFlag = catalogCreateCustomerFlags.String("body", "REQUIRED", "")

		catalogCreateCartFlags    = flag.NewFlagSet("create-cart", flag.ExitOnError)
		catalogCreateCartBodyFlag = catalogCreateCartFlags.String("body", "REQUIRED", "")

		catalogCreateCountryFlags    = flag.NewFlagSet("create-country", flag.ExitOnError)
		catalogCreateCountryBodyFlag = catalogCreateCountryFlags.String("body", "REQUIRED", "")

		catalogCreateStateFlags    = flag.NewFlagSet("create-state", flag.ExitOnError)
		catalogCreateStateBodyFlag = catalogCreateStateFlags.String("body", "REQUIRED", "")
	)
	catalogFlags.Usage = catalogUsage
	catalogCreateActorFlags.Usage = catalogCreateActorUsage
	catalogShowActorFlags.Usage = catalogShowActorUsage
	catalogCreateBookFlags.Usage = catalogCreateBookUsage
	catalogListBooksFlags.Usage = catalogListBooksUsage
	catalogShowBookFlags.Usage = catalogShowBookUsage
	catalogCreateCategoryFlags.Usage = catalogCreateCategoryUsage
	catalogShowCategoryFlags.Usage = catalogShowCategoryUsage
	catalogCreateCustomerFlags.Usage = catalogCreateCustomerUsage
	catalogCreateCartFlags.Usage = catalogCreateCartUsage
	catalogCreateCountryFlags.Usage = catalogCreateCountryUsage
	catalogCreateStateFlags.Usage = catalogCreateStateUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "catalog":
			svcf = catalogFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "catalog":
			switch epn {
			case "create-actor":
				epf = catalogCreateActorFlags

			case "show-actor":
				epf = catalogShowActorFlags

			case "create-book":
				epf = catalogCreateBookFlags

			case "list-books":
				epf = catalogListBooksFlags

			case "show-book":
				epf = catalogShowBookFlags

			case "create-category":
				epf = catalogCreateCategoryFlags

			case "show-category":
				epf = catalogShowCategoryFlags

			case "create-customer":
				epf = catalogCreateCustomerFlags

			case "create-cart":
				epf = catalogCreateCartFlags

			case "create-country":
				epf = catalogCreateCountryFlags

			case "create-state":
				epf = catalogCreateStateFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint endpoint.Endpoint
		err      error
	)
	{
		switch svcn {
		case "catalog":
			c := catalogc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-actor":
				endpoint = c.CreateActor()
				data, err = catalogc.BuildCreateActorPayload(*catalogCreateActorBodyFlag)
			case "show-actor":
				endpoint = c.ShowActor()
				data, err = catalogc.BuildShowActorPayload(*catalogShowActorIDFlag)
			case "create-book":
				endpoint = c.CreateBook()
				data, err = catalogc.BuildCreateBookPayload(*catalogCreateBookBodyFlag)
			case "list-books":
				endpoint = c.ListBooks()
				data = nil
			case "show-book":
				endpoint = c.ShowBook()
				data, err = catalogc.BuildShowBookPayload(*catalogShowBookIDFlag)
			case "create-category":
				endpoint = c.CreateCategory()
				data, err = catalogc.BuildCreateCategoryPayload(*catalogCreateCategoryBodyFlag)
			case "show-category":
				endpoint = c.ShowCategory()
				data, err = catalogc.BuildShowCategoryPayload(*catalogShowCategoryIDFlag)
			case "create-customer":
				endpoint = c.CreateCustomer()
				data, err = catalogc.BuildCreateCustomerPayload(*catalogCreateCustomerBodyFlag)
			case "create-cart":
				endpoint = c.CreateCart()
				data, err = catalogc.BuildCreateCartPayload(*catalogCreateCartBodyFlag)
			case "create-country":
				endpoint = c.CreateCountry()
				data, err = catalogc.BuildCreateCountryPayload(*catalogCreateCountryBodyFlag)
			case "create-state":
				endpoint = c.CreateState()
				data, err = catalogc.BuildCreateStatePayload(*catalogCreateStateBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// catalogUsage displays the usage of the catalog command and its subcommands.
func catalogUsage() {
	fmt.Fprintf(os.Stderr, `The catalog service performs operations on catalog
Usage:
    %s [globalflags] catalog COMMAND [flags]

COMMAND:
    create-actor: CreateActor implements create_actor.
    show-actor: ShowActor implements show_actor.
    create-book: CreateBook implements create_book.
    list-books: ListBooks implements list_books.
    show-book: ShowBook implements show_book.
    create-category: CreateCategory implements create_category.
    show-category: ShowCategory implements show_category.
    create-customer: CreateCustomer implements create_customer.
    create-cart: CreateCart implements create_cart.
    create-country: CreateCountry implements create_country.
    create-state: CreateState implements create_state.

Additional help:
    %s catalog COMMAND --help
`, os.Args[0], os.Args[0])
}
func catalogCreateActorUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] catalog create-actor -body JSON

CreateActor implements create_actor.
    -body JSON: 

Example:
    `+os.Args[0]+` catalog create-actor --body '{
      "description": "te3",
      "email": "hildegard_cruickshank@stroman.net",
      "name": "Voluptates deleniti."
   }'
`, os.Args[0])
}

func catalogShowActorUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] catalog show-actor -id STRING

ShowActor implements show_actor.
    -id STRING: ID

Example:
    `+os.Args[0]+` catalog show-actor --id "Tempore expedita rerum."
`, os.Args[0])
}

func catalogCreateBookUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] catalog create-book -body JSON

CreateBook implements create_book.
    -body JSON: 

Example:
    `+os.Args[0]+` catalog create-book --body '{
      "actor_ids": [
         "Et necessitatibus impedit quam.",
         "Commodi similique et.",
         "Provident at hic quibusdam sint et.",
         "Atque assumenda dolor quia et dolore unde."
      ],
      "category_ids": [
         "Sit sequi.",
         "Sed sed dicta facere officia."
      ],
      "isbn": "Accusantium a expedita illo.",
      "issue": "Perferendis perspiciatis.",
      "pages": 3951472581591739083,
      "price": 20.86182,
      "summary": "Est asperiores provident inventore.",
      "synopsis": "n1z",
      "title": "Provident ducimus."
   }'
`, os.Args[0])
}

func catalogListBooksUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] catalog list-books

ListBooks implements list_books.

Example:
    `+os.Args[0]+` catalog list-books
`, os.Args[0])
}

func catalogShowBookUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] catalog show-book -id STRING

ShowBook implements show_book.
    -id STRING: ID

Example:
    `+os.Args[0]+` catalog show-book --id "Inventore eum aut eos aut."
`, os.Args[0])
}

func catalogCreateCategoryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] catalog create-category -body JSON

CreateCategory implements create_category.
    -body JSON: 

Example:
    `+os.Args[0]+` catalog create-category --body '{
      "name": "Quis est."
   }'
`, os.Args[0])
}

func catalogShowCategoryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] catalog show-category -id STRING

ShowCategory implements show_category.
    -id STRING: ID

Example:
    `+os.Args[0]+` catalog show-category --id "Doloremque doloremque at nemo."
`, os.Args[0])
}

func catalogCreateCustomerUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] catalog create-customer -body JSON

CreateCustomer implements create_customer.
    -body JSON: 

Example:
    `+os.Args[0]+` catalog create-customer --body '{
      "address": {
         "address": "Recusandae occaecati animi.",
         "cep": "Quis fugit corporis aliquid beatae sequi.",
         "city": "Placeat sit et est atque.",
         "complement": "Et vitae.",
         "country_id": "Rem consectetur quo voluptate.",
         "state_id": "Earum esse enim doloremque."
      },
      "cart_ids": [
         "Ad sed incidunt similique.",
         "Autem dolorem consequatur dicta commodi earum et.",
         "Eaque doloribus rerum.",
         "Nostrum veniam."
      ],
      "document": "Nesciunt assumenda aperiam excepturi harum enim vero.",
      "email": "orie@stark.name",
      "first_name": "Delectus et et ea officiis.",
      "last_name": "Voluptas dicta.",
      "phone": "Placeat aut hic iure voluptatem."
   }'
`, os.Args[0])
}

func catalogCreateCartUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] catalog create-cart -body JSON

CreateCart implements create_cart.
    -body JSON: 

Example:
    `+os.Args[0]+` catalog create-cart --body '{
      "customer_id": "Voluptatem deserunt expedita minus quia nobis reprehenderit.",
      "items": [
         {
            "amount": 1131047539,
            "book_id": "Corporis maiores labore autem occaecati eligendi fugit."
         },
         {
            "amount": 1131047539,
            "book_id": "Corporis maiores labore autem occaecati eligendi fugit."
         },
         {
            "amount": 1131047539,
            "book_id": "Corporis maiores labore autem occaecati eligendi fugit."
         },
         {
            "amount": 1131047539,
            "book_id": "Corporis maiores labore autem occaecati eligendi fugit."
         }
      ],
      "total": 0.4391943
   }'
`, os.Args[0])
}

func catalogCreateCountryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] catalog create-country -body JSON

CreateCountry implements create_country.
    -body JSON: 

Example:
    `+os.Args[0]+` catalog create-country --body '{
      "name": "Ullam minus enim possimus eligendi."
   }'
`, os.Args[0])
}

func catalogCreateStateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] catalog create-state -body JSON

CreateState implements create_state.
    -body JSON: 

Example:
    `+os.Args[0]+` catalog create-state --body '{
      "country_id": "Dolorum neque ut ex ex voluptas inventore.",
      "name": "Eaque recusandae alias itaque ipsa et."
   }'
`, os.Args[0])
}
