// Code generated by goa v3.2.4, DO NOT EDIT.
//
// cdc HTTP client CLI support package
//
// Command:
// $ goa gen github.com/selmison/seed-desafio-cdc/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	"github.com/go-kit/kit/endpoint"
	actorsc "github.com/selmison/seed-desafio-cdc/gen/http/actors/client"
	goahttp "goa.design/goa/v3/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `actors create
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` actors create --body '{
      "description": "w4k",
      "e-mail": "Aliquam asperiores iusto.",
      "name": "Enim itaque quod cupiditate."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (endpoint.Endpoint, interface{}, error) {
	var (
		actorsFlags = flag.NewFlagSet("actors", flag.ContinueOnError)

		actorsCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		actorsCreateBodyFlag = actorsCreateFlags.String("body", "REQUIRED", "")
	)
	actorsFlags.Usage = actorsUsage
	actorsCreateFlags.Usage = actorsCreateUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "actors":
			svcf = actorsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "actors":
			switch epn {
			case "create":
				epf = actorsCreateFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint endpoint.Endpoint
		err      error
	)
	{
		switch svcn {
		case "actors":
			c := actorsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = actorsc.BuildCreatePayload(*actorsCreateBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// actorsUsage displays the usage of the actors command and its subcommands.
func actorsUsage() {
	fmt.Fprintf(os.Stderr, `The actors service performs operations on actors
Usage:
    %s [globalflags] actors COMMAND [flags]

COMMAND:
    create: Create implements create.

Additional help:
    %s actors COMMAND --help
`, os.Args[0], os.Args[0])
}
func actorsCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] actors create -body JSON

Create implements create.
    -body JSON: 

Example:
    `+os.Args[0]+` actors create --body '{
      "description": "w4k",
      "e-mail": "Aliquam asperiores iusto.",
      "name": "Enim itaque quod cupiditate."
   }'
`, os.Args[0])
}
